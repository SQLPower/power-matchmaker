<project name="matchmaker" default="dist" basedir=".">

	<!-- $Id$ -->
	<!-- get the version number from source code MatchMakerUtils -->

	<property file="build.properties"/>
	<property name="src" value="src"/>
	<property name="build" value="build"/>
	<property name="build.tests" value="${build}"/>
	<property name="lib" value="lib"/>
	<property name="buildlib" value="buildlib"/>
	
	<!-- The staging directory is a temp dir that is used as a base for all
	     the OS-dependant distributions -->
	<property name="staging.dir" value="staging"/>
	<property name="dist.base" value="dist"/>
	
	<!-- Windows installer tool: izpack (needs both a jar and its own
		     directory to run properly) -->
	<property name="izpack.dir" value="ext-tools/izpack"/>
	<taskdef name="izpack" classpath="${izpack.dir}/lib/standalone-compiler.jar"
		     classname="com.izforge.izpack.ant.IzPackTask"/>

	<!-- Base directory for the izpack (Windows) installer output -->
	<property name="installer.dir" value="installer"/>
	
	<!-- findbugs code checking tool -->
	<property name="findbugs.home" value="ext-tools/findbugs"/>
	<property name="findbugs-ant.jar" value="${findbugs.home}/lib/findbugs-ant.jar"/>
	
	<!-- When the build runs on a Mac, we can create the .dmg disk image
	     using the native hdiutil program.  Otherwise, we just make a .tar.gz.
	-->
	<condition property="isMac">
		<os family="mac"/>
	</condition>

	<condition property="isNotMac">
		<not>
			<os family="mac"/>
		</not>
	</condition>
	
	<!-- When the build runs on Windows, we can create the .exe executable
	     using the izpack2exe's exe tool. Otherwise, we would use python
	     along with the python izpack2exe python script.
	-->
	<condition property="isWindows">
		<os family="windows"/>
	</condition>

	<condition property="isNotWindows">
		<not>
			<os family="windows"/>
		</not>
	</condition>
	
	<!-- 
		Actually, I wanted to test for if this is Linux so to know which
		launch4j binaries to use, but unfortunately, there is no 'linux' 
		value, just unix. So if it's unix, then we will try to use the linux binary.
	-->
	<condition property="isUnix">
		<os family="unix"/>
	</condition>

	<condition property="isNotUnix">
		<not>
			<os family="unix"/>
		</not>
	</condition>
	
	<condition property="launch4j.dir" value="ext-tools/launch4j/launch4j-macosx" >
		<isset property="isMac"/>
	</condition>
	
	<condition property="launch4j.dir" value="ext-tools/launch4j/launch4j-linux" >
		<isset property="isUnix"/>
	</condition>
	
	<condition property="launch4j.dir" value="ext-tools/launch4j/launch4j-win32" >
		<isset property="isWindows"/>
	</condition>
	
	<taskdef name="launch4j"
	    classname="net.sf.launch4j.ant.Launch4jTask"
	    classpath="${launch4j.dir}/launch4j.jar
	        :${launch4j.dir}/lib/xstream.jar" />
	
	<!-- 
		Sets if we want to actually run a build on the SQL Power Library.
		It may be useful to set it to copy only if we already know that the
		library has been built. For example, when running the builds on a 
		continuous integration engine like Hudson, where the library can be
		built separately.
	-->
	<condition property="buildSQLPowerLibrary">
		<not>
			<isset property="only.copy.sqlpower.library"/>
		</not>
	</condition>
	
	<!--
		Set the format of the findbugs report to html by default
	-->
	<condition property="findbugs.report.format" value="html">
		<not>
			<isset property="findbugs.report.format"/>
		</not>
	</condition>
	
	<!--
		Set the format of the pmd report to html by default
	-->
	<condition property="pmd.report.format" value="html">
		<not>
			<isset property="pmd.report.format"/>
		</not>
	</condition>
	
	
	<!-- A path that will include all jars in the lib and buildlib folders -->
	<path id="compile.classpath">
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${buildlib}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="test.classpath">
		<pathelement location="${build}"/>
		<pathelement location="${sqlpower.library.home}/build/tests"/>
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<!-- Compiles the MatchMaker and places the .class files into build-->
	<target name="compile" depends="build.sqlpower.library, copy.sqlpower.library, copyfiles">
		<mkdir dir="${build}"/>
		<javac 	srcdir="${src}" 
				destdir="${build}" 
				classpathref="compile.classpath"
			    source="1.5"
				debug="true"
		/>
	</target>

	<!-- Compiles the MatchMaker and places the .class files into build-->
	<target name="javadoc" depends="getAppVersion,compile">
		<mkdir dir="${dist.dir}/doc/api"/>
		<javadoc sourcepath="${src}" destdir="${dist.dir}/doc/api"
			packagenames="ca.sqlpower.*"
			maxmemory="100m"
			windowtitle="ca.sqlpower.matchmaker.* Power*MatchMaker"
			Version="true" Author="true" Use="true"
			classpathref="test.classpath"
			>
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="ca/sqlpower/**" />
				<exclude name="regress/**"/>
			</packageset>
			<bottom><![CDATA[<i>Copyright &#169; 2003-2008 SQL Power Group Inc. <a href="http://www.sqlpower.ca/">www.sqlpower.ca</a>]]></bottom>
		</javadoc>
	</target>

	<target name="javadoc.with.umlgraph" 
		description="Generate the Javadoc documentation for the MatchMaker API along with UML diagrams generated using UMLGraph"
		depends="getAppVersion, compile">
		<mkdir dir="${dist.dir}/doc/api"/>
		<javadoc sourcepath="${src}" destdir="${dist.dir}/doc/api"
			packagenames="ca.sqlpower.*"
			maxmemory="100m"
			windowtitle="ca.sqlpower.matchmaker.* Power*MatchMaker"
			Version="true" Author="true" Use="true"
			Overview="html/overview.html"
			classpathref="test.classpath"
			>
			<doclet name="gr.spinellis.umlgraph.doclet.UmlGraphDoc"
    		  path="buildlib/UmlGraph.jar">
    	        <param name="-attributes" />
    	        <param name="-operations" />
    	        <param name="-qualify" />
    	        <param name="-types" />
    	        <param name="-visibility" />
    	    </doclet>
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="ca/sqlpower/**" />
				<exclude name="regress/**"/>
			</packageset>
			<bottom><![CDATA[<i>Copyright &#169; 2003-2008 SQL Power Group Inc. <a href="http://www.sqlpower.ca/">www.sqlpower.ca</a>]]></bottom>
		</javadoc>
		
		<apply executable="dot" dest="${dist.dir}/doc" parallel="false">
			<arg value="-Tpng"/>
			<arg value="-o"/>
			<targetfile/>
			<srcfile/>
			<fileset dir="${dist.dir}/doc" includes="*.dot"/>
			<mapper type="glob" from="*.dot" to="*.png"/>
		</apply>
	</target>
	
	
	<target name="copyfiles" depends="matchmaker.version.properties">
		<mkdir dir="${build}/icons"/>
	    <copy todir="${build}/icons">
			<fileset dir="src/icons/">
				<include name="**/*.gif"/>
				<include name="**/*.png"/>
				<include name="**/*.icns"/>
			</fileset>
		</copy>
		
		<copy todir="${build}/ca/sqlpower/matchmaker/dao/hibernate">
			<fileset dir="src/ca/sqlpower/matchmaker/dao/hibernate">
				<include name="*.xml"/>
				<include name="*.sql"/>
				<include name="*.architect"/>
			</fileset>
		</copy>
		
		<copy todir="${build}/ca/sqlpower/matchmaker/address">
			<fileset dir="src/ca/sqlpower/matchmaker/address">
				<include name="*.property"/>
			</fileset>
		</copy>
		
		<copy file="${dist.dir}/matchmaker.version.properties" todir="${build}/ca/sqlpower/matchmaker"/>
		
		<!-- copies the template log4j config file into the build dir -->
		<copy tofile="${build}/log4j.properties"
			file="src/log4j.properties.example"/>
		<copy tofile="${build}/ca/sqlpower/matchmaker/swingui/munge/munge_components.properties"
			file="src/ca/sqlpower/matchmaker/swingui/munge/munge_components.properties"/>
	</target>
	
	
	

	<!-- Compiles the regression test suite -->
	<target name="compile-tests" depends="compile">
		<ant dir="${sqlpower.library.home}" target="compile-tests">
			<property name="build" value="${sqlpower.library.home}/build"/>
			<property name="build.tests" value="${sqlpower.library.home}/build/tests"/>
		</ant>
		<mkdir dir="${build.tests}"/>
		<javac srcdir="regress" destdir="${build.tests}"
			classpathref="test.classpath"
			debug="true"/>
	</target>
	
	<!-- Creates distributables for all supported OSes -->
	<target name="dist" depends="junit, pmd, pmd-cpd, findbugs, userguide, javadoc, osx_tgz,osx_dmg,windows_exe_installer_launch4j,generic_install,source_only_tgz, downloadpage">
		<echo>Don't forget to turn off all the debugging in log4j.properties!</echo>
		<mkdir dir="${dist.dir}/doc"/>
		<copy todir="${dist.dir}/doc" overwrite="true">
			<fileset dir="${staging.dir}/doc">
				<include name="*.txt"/>
			</fileset>
		</copy>
		<copy todir="${dist.dir}" overwrite="true">
			<fileset dir="${staging.dir}/doc">
				<include name="*-${app.version}.pdf"/>
			</fileset>
		</copy>
		<echo>Did you forget to turn off all the debugging in log4j.properties?!</echo>
	</target>
	
	<!-- ================================= 
          target: downloadpage              
         ================================= -->
    <target name="downloadpage" depends="getAppVersion">
    	<mkdir dir="${dist.dir}"/>
	    <get dest="${dist.dir}/index.html" src="http://www.sqlpower.ca/page/dqguru_download_template"/>
		<replace file="${dist.dir}/index.html">
			<replacefilter token="&lt;head&gt;" value="&lt;head&gt;&lt;base href=&quot;http://www.sqlpower.ca/page/&quot;&gt;"/>
			<replacefilter token="@@app_version" value="${app.version}"/>
			<replacefilter token="@@downloadLinkBase" value="${downloadLinkBase}"/>
			<replacefilter token="@@docLinkBase" value="${docLinkBase}"/>
		</replace>
    </target>

	
	<!-- DOCUMENTATION
		There are THREE main documentation targets, all built from the
		docbook XML file docs/PowerArchitectUsersGuide:
			help - JavaHelp (jarred and shipped)
			html - for quick viewing on our web site
			PDF - because we can :-)
	-->

	<!-- NOTE: All XSLT steps currently require xalan on classpath since JDK1.5 is behind -->
	<path id="docbookclasspath">
		<fileset dir="doc/tools/xalan">
			<include name="*.jar"/>
		</fileset>
	</path>

	<target name="userguide" depends="help,pdf" description="Creates user guide in HTML and PDF">
	</target>

	<!-- Create an intermediate docbook document - for use both by help and html -
	with no width attributes on the images (the Swing HTML browser chokes
	when there is width but no height in an image tag)
	-->
	<target name="xslt-stripwidths">
		<xslt
			style="doc/tools/strip-width.xsl"
			in="doc/DQguruUserGuide.xml"
			out="${java.io.tmpdir}/DQguruUserGuide-nowidth.xml"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Build the Help (JavaHelp, HTML-based format).
	 ** Note that at this time you must NOT have spaces in your
	 ** path (e.g., an Eclipse Workspace under "Documents and Settings"
	 ** will fail out because it changes spaces in filenames to %20.
	 -->
	<target name="help" depends="checkBuildPath, xslt-stripwidths" description="Create JavaHelp">
		<mkdir dir="${build}/help"/>
		<!-- This XSLT element is what's causing the problem with the
			directories with spaces not working. It outputs the results
			to a new directory with spaces replaced with '%20'-->
		<xslt
			style="doc/tools/xslt/javahelp/javahelp.xsl"
			in="${java.io.tmpdir}/DQguruUserGuide-nowidth.xml"
			out="${build}/help/zzz"
			classpathref="docbookclasspath">
		</xslt>

		<!-- Index it I: limited-terms index: created manually, just copy it,
		 *** overwriting empty one that DocBook Javahelp made.
		 -->
		<copy file="doc/jhelpidx.xml" todir="${build}/help" overwrite="true"/>

		<!-- Index it II: full text search -->
		<!-- DO NOT USE as it seems to have a built-in assumption
		 *** that the help is all in one file.
		<java classname="com.sun.java.help.search.Indexer"
			classpath="lib/jhall.jar"
			fork="true" failonerror="true">
			<arg value="${build}/help"/>
		</java>
		<mkdir dir="${build}/help/JavaHelpSearch"/>
		<move todir="${build}/help/JavaHelpSearch">
			<fileset dir="JavaHelpSearch" includes="**"/>
		</move>
		-->
		<!-- So, remove the search view from the JavaHelp config -->
		<replace file="${build}/help/jhelpset.hs" value="">
			<replacetoken><![CDATA[<view><name>Search</name><label>Search</label><type>javax.help.SearchView</type><data engine="com.sun.java.help.search.DefaultSearchEngine">JavaHelpSearch</data></view>]]></replacetoken>
		</replace>

		<!-- Add the Favorites/Bookmarks views into the JavaHelp Config -->
		<replace file="${build}/help/jhelpset.hs"
			token="jhelpidx.xml&lt;/data>&lt;/view>&lt;/helpset>"
			value="jhelpidx.xml&lt;/data>&lt;/view>&lt;view>&lt;name>favorites&lt;/name>&lt;label>Favorites&lt;/label>&lt;type>javax.help.FavoritesView&lt;/type>&lt;/view>&lt;/helpset>"/>

		<!-- Copy the images and icons; the DocBook files have
			these horrid "src/" and "doc/" paths prepended
			so we have to preserve these here -->
		<mkdir dir="${build}/help/doc/images"/>
		<copy todir="${build}/help/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>

		<mkdir dir="${build}/help/src/icons"/>
		<copy todir="${build}/help/src/icons" overwrite="true">
			<fileset dir="src/icons">
				<include name="*.gif"/>
				<include name="*.png"/>
			</fileset>
		</copy>

		<!-- Jar the whole mess up and add to working classpath -->
		<jar file="${build}/dqguruhelp.jar" basedir="${build}/help" update="false">
		</jar>
	</target>

	<!-- Build the HTML -->
	<target name="html" depends="checkBuildPath, xslt-stripwidths" description="Create user guide in HTML">
		<mkdir dir="${build}/doc/html" />

		<xslt
			style="doc/tools/xslt/html/docbook.xsl"
			in="${java.io.tmpdir}/DQguruUserGuide-nowidth.xml"
			out="${build}/doc/html/DQguruUserGuide.html"
			classpathref="docbookclasspath">
		</xslt>

		<!-- Warning: This is an extremely evil hack to get the product out the door!
		              See bugzilla 1195 for details -->
		<mkdir dir="${build}/ca/sqlpower/matchmaker/doc/doc/images" />
		<copy todir="${build}/doc/html/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>
	</target>

	<!-- Convert User Manual from XML to FO -->
	<!-- USED to depend on init in architect, not sure if it is needed -->
	<target name="fo" depends="getAppVersion" description="Create user guide in XML Formatting Objects">
		<mkdir dir="${build}/doc/" />
        <xslt
			style="doc/tools/xslt/fo/docbook.xsl"
			in="doc/DQguruUserGuide.xml"
			out="${build}/doc/DQguruUserGuide-${app.version}.fo"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Finish it, from FO to PDF -->
	<target name="pdf" depends="fo" description="Create user guide in PDF">
		<path id="fop-classpath">
			<fileset dir="doc/tools/xalan">
			  <include name="*.jar"/>
			</fileset>
			<fileset dir="doc/tools/fop">
			  <include name="*.jar"/>
			</fileset>
		</path>
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop" classpathref="fop-classpath"/>
        <fop format="application/pdf" messagelevel="verbose" relativebase="true" >
			<fileset dir="${build}/doc/">
				<include name="*.fo"/>
			</fileset>
		</fop>

    </target>

	<!-- Runs the test suite -->
	<target name="junit" depends="getAppVersion, compile-tests">
	 	<mkdir dir="${reports}"/>
		<property name="reports.junit" value="${reports}/junit"/>
		<mkdir dir="${reports.junit}"/>
		<!-- Output all System.out and System.err messages -->
	   <junit printsummary="on" maxmemory="512m">
	   	   <sysproperty key="ca.sqlpower.matchmaker.test.dir" value="${build.tests}"/>
	       <classpath>
	       		<path refid="test.classpath"/>
	       		<path path="${build.tests}"/>
	       </classpath>
	       <test name="ca.sqlpower.matchmaker.MatchMakerAllTests" todir="${reports.junit}"/>
	   	   <formatter type="xml"/>
	   </junit>
		<!-- Generate HTML report -->
		<junitreport todir="${reports.junit}">
		  <fileset dir="${reports.junit}">
		    <include name="TEST-*.xml" />
		  </fileset>
		  <report todir="${reports.junit}" />
		</junitreport>
	</target>
	
	
	<target name="stage" depends="getAppVersion, compile, userguide">
		<mkdir dir="${dist.dir}" />
        <mkdir dir="${staging.dir}"/>
        <mkdir dir="${staging.dir}/lib"/>
        <mkdir dir="${staging.dir}/jdbc"/>
    	<mkdir dir="${staging.dir}/doc"/>
		
    	<copy todir="${staging.dir}/lib">
    	    <fileset dir="lib" includes="*.jar"/>
    		<fileset dir="${build}" includes="dqguruhelp.jar" />
    	</copy>
		
    	<copy todir="${staging.dir}/doc">
        	<fileset dir="${build}/doc" includes="*-${app.version}.pdf"/>
    	   	<fileset dir="${build}/doc" includes="*.txt"/>
    	</copy>

		<manifestclasspath property="dqguru.jar.classpath" jarfile="${staging.dir}/dqguru.jar">
    		<classpath>
	    		<pathelement path="${staging.dir}/jdbc"/>
    			<fileset dir="${staging.dir}/">
    				<include name="lib/*.jar"/>
    			</fileset>
    		</classpath>
    	 </manifestclasspath>

    	<manifest file="${build}/manifest">
    		<attribute name="Main-Class" value="ca.sqlpower.matchmaker.swingui.MatchMakerSwingSession"/>
    		<attribute name="Class-Path" value="${dqguru.jar.classpath}" />
    	</manifest>

    	<jar destfile="${staging.dir}/dqguru.jar" update="no"
    				basedir="${build}" 
    				includes="ca/** org/** icons/** log4j.properties default_database_types.ini"
    				manifest="${build}/manifest">
    	</jar>
		
    	<launch4j>
			<config dontwrapjar="true" 
					headertype="gui"
					jarpath="dqguru.jar"
					outfile="${staging.dir}/dqguru.exe"
					errtitle="Java Runtime Required"
					priority="normal"
					downloadurl="http://java.com/download"
					supporturl="http://www.sqlpower.ca/forum"
					customprocname="false"
					stayalive="false"
					icon="src/icons/dqguru.ico">
				<jre minVersion="1.5.0"
					 maxHeapSize="600"
				/>
			</config>
		</launch4j>
		
		<copy todir="${staging.dir}/lib">
    	    <fileset dir="lib" includes="*.jar"/>
    		<!--fileset dir="${build}" includes="architecthelp.jar" /-->
    	</copy>
		
		<copy todir="${staging.dir}/jdbc">
		    <fileset dir="jdbc_drivers" includes="*.jar"/>
			<fileset dir="src" includes="default_database_types.ini"/>
	    </copy>
		
		<copy todir="${staging.dir}/doc" file="doc/ReleaseNotes.txt"/>
		<copy todir="${staging.dir}" file="LICENSE"/>
		<copy todir="${staging.dir}" file="LEGAL"/>
		
	</target>
	
	
	<target name="getAppVersion">
		<mkdir dir="${build}"/>
		<!-- get the version number from source code ArchitectUtils -->
		<delete file="${build}/ca/sqlpower/matchmaker/antbuild/MatchMakerVersionTask.class"/>
		<javac srcdir="${src}" destdir="${build}" classpathref="compile.classpath" includes="ca/sqlpower/matchmaker/antbuild/MatchMakerVersionTask.java" debug="true"/>
		<taskdef name="genVersion"
					classname="ca.sqlpower.matchmaker.antbuild.MatchMakerVersionTask"
			        classpath="${build}"/>
		<genVersion/>
		<tstamp>
			<format property="date" pattern="yyyyMMddHHmmss"/>
		</tstamp>
		<condition property="app.ver.suffix" value="-${date}">
			<isset property="nightly"/>
		</condition>
		<!-- Else, if app_ver_suffix is empty, then don't use a suffix -->
		<condition property="app.ver.suffix" value="">
			<and>
				<equals arg1="${app_ver_suffix}" arg2=""/>
				<not><isset property="app.ver.suffix"/></not>
			</and>
		</condition>
		<!-- otherwise, use the normal app_ver_suffix as the suffix -->
		<condition property="app.ver.suffix" value="-${app_ver_suffix}">
			<not><isset property="app.ver.suffix"/></not>
		</condition>

		<property name="app.version" value="${app_ver_major}.${app_ver_minor}.${app_ver_tiny}${app.ver.suffix}"/>
		<property name="dist.dir" value="${dist.base}/dqguru-${app.version}"/>
		<property name="reports" value="${dist.dir}/reports"/>

		<condition property="downloadLinkBase" value="http://nightlybuild.sqlpower.ca/matchmaker/nightly/${app.version}">
			<isset property="nightly"/>
		</condition>
		
		<condition property="docLinkBase" value="${downloadLinkBase}">
			<isset property="nightly"/>		
		</condition>
		<condition property="downloadLinkBase"
			value="http://power-matchmaker.googlecode.com/files">
			<not><isset property="downloadLinkBase"/></not>
		</condition>
		<condition property="docLinkBase" 
			value="http://download.sqlpower.ca/dqguru/${app.version}">
			<not><isset property="docLinkBase"/></not>
		</condition>

		<echo message="Building DQguru version: ${app.version}"/>
	</target>
	
	
	<target name="windows_jar_installer" depends="stage">
		<izpack output="${dist.dir}/DQguru-Setup-Windows-${app.version}.jar"
		        installerType="standard"
			    basedir="${installer.dir}"
		        izPackDir="${izpack.dir}/">
			<config><![CDATA[
				<installation version="1.0">
					<!-- comment -->
					<info>
						<appname>DQguru</appname>
						<appversion>@{app.version}</appversion>
						<url>http://www.sqlpower.ca/</url>
						<javaversion>1.5</javaversion>
					</info>
					<guiprefs height="600" resizable="yes" width="800">
						<laf name="metouia">
							<os family="unix"/>
						</laf>
					</guiprefs>
	
					<locale>
						<langpack iso3="eng"/>
					</locale>
					<resources>
						<res id="Installer.image" src="../src/icons/dqguru_huge.png"/>
						<res src="DQguruShortcut.xml" id="shortcutSpec.xml"/>
						<res id="LicencePanel.licence" src="../LICENSE" />
					</resources>
					<listeners>
						<listener installer="SummaryLoggerInstallerListener"/>
				       	<listener installer="RegistryInstallerListener"
								  uninstaller="RegistryUninstallerListener">
				          <os family="windows"/>
				       	</listener>
					</listeners>
					<panels>
						<panel classname="HelloPanel"/>
						<panel classname="LicencePanel"/>
						<panel classname="TargetPanel"/>
						<panel classname="InstallPanel"/>
						<panel classname="ShortcutPanel"/>
						<panel classname="SimpleFinishPanel"/>
					</panels>
					<packs>
						<pack name="Core" required="yes">
							<description>DQguru Core Files</description>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="dqguru.jar"/>
								<include name="dqguru.exe"/>
							</fileset>
							<fileset dir="../staging/lib" targetdir="$INSTALL_PATH/lib">
								<include name="*.jar"/>
							</fileset>
							<!-- the directory jdbc is referenced in the manifest as well as
								various targets. -->
							<fileset dir="../staging/jdbc" targetdir="$INSTALL_PATH/jdbc">
								<include name="*.jar"/>
								<include name="*.ini"/>
							</fileset>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="LICENSE"/>
							</fileset>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="LEGAL"/>
							</fileset>
							<fileset dir="." targetdir="$INSTALL_PATH">
								<include name="*.reg"/>
							</fileset>
							<fileset dir="../src/icons" targetdir="$INSTALL_PATH">
								<include name="*.ico"/>
							</fileset>
							<fileset dir="." targetdir="$INSTALL_PATH">
								<include name="*.ico"/>
							</fileset>
						</pack>
					</packs>
					<native type="izpack" name="ShellLink.dll"/>
					<native type="3rdparty" name="COIOSHelper.dll" stage="both">
				        <os family="windows"/>
				    </native>
				</installation>
				]]>
			</config>
		</izpack>
	</target>
	
	<property name="izpack2exe.dir" value="${izpack.dir}/utils/izpack2exe"/>
	
	<target name="windows_exe_installer_launch4j" depends="windows_jar_installer">
		<launch4j>
			<config dontwrapjar="false" 
					headertype="gui"
					jar="${dist.dir}/DQguru-Setup-Windows-${app.version}.jar"
					outfile="${dist.dir}/DQguru-Setup-Windows-${app.version}.exe"
					errtitle="Java Runtime Required"
					priority="normal"
					downloadurl="http://java.com/download"
					supporturl="http://www.sqlpower.ca/forum"
					customprocname="false"
					stayalive="false"
					icon="src/icons/dqguru.ico">
				<singleInstance
					mutexName="DQguru Installer"
					windowTitle="DQguru Installer"
				/>
				<jre minVersion="1.5.0"/>
			</config>
		</launch4j>
	</target>
	
	<!-- 
		Uses izpack python script to convert the Windows JDBC JAR installer into EXE executables
		Note that this target requires the python command to be in your PATH
	 -->
	<target name="windows_exe_installer_with_python" depends="windows_jar_installer" if="isNotWindows">
	  <exec executable="python" dir="${izpack2exe.dir}">
	    <arg value="izpack2exe.py"/>
	    <arg value="--file=../../../../${dist.dir}/DQguru-Setup-Windows-${app.version}.jar"/>
	    <arg value="--no-upx"/>
	  	<arg value="--output=../../../../${dist.dir}/DQguru-Setup-Windows-${app.version}.exe"/>
	  </exec>
	</target>
	
	<target name="windows_exe_installer_without_python" depends="windows_jar_installer" if="isWindows">
	  <exec executable="cmd" dir="${izpack2exe.dir}">
  	    <arg value="/c"/>
  	    <arg value="izpack2exe.exe"/>
	    <arg value="--file=..\..\..\..\${dist.dir}\DQguru-Setup-Windows-${app.version}.jar"/>
	    <arg value="--no-upx"/>
	  	<arg value="--output=..\..\..\..\${dist.dir}\DQguru-Setup-Windows-${app.version}.exe"/>
	  </exec>
	</target>
	
    <target name="generic_install" depends="stage">
		<tar destfile="${dist.dir}/DQguru-generic-${app.version}.tar.gz"
			compression="gzip">
			<tarfileset
			    prefix="dqguru-${app.version}"
				dir="${staging.dir}"
				includes="LICENSE, LEGAL, lib/*.jar, dqguru.jar, jdbc/*.ini, jdbc/*.jar" />
			<tarfileset
			    prefix="dqguru-${app.version}"
				dir="doc"
				includes="README.generic" />
		</tar>
    </target>
	
	
	<!-- OS X .app bundling tool: jarbundler -->
	<taskdef name="jarbundler" 
		classpath="osx_packaging_utils/jarbundler.jar:osx_packaging_utils/xercesImpl.jar:osx_packaging_utils/xml-apis.jar"
		classname="net.sourceforge.jarbundler.JarBundler"/>
	
	
	<target name="osx_dist" depends="stage">
		<!-- The pre-compiled osx adapter class (it only compiles on OS X) -->
		<copy file="osx_packaging_utils/osx_adapter.jar" todir="${staging.dir}/lib"/>

		<!-- jarbundler is from sourceforge, defined near top of file -->
		<jarbundler dir="${staging.dir}"
           name="DQguru"
           version="${app.version}"
           mainclass="ca.sqlpower.matchmaker.swingui.MatchMakerSwingSession"
           icon="src/icons/dqguru.icns"
           jvmversion="1.5+"
           shortname="DQguru"
           stubfile="osx_packaging_utils/DQguruStub"
           vmoptions="-Xmx600m">
			<jarfileset dir="${staging.dir}" includes="lib/*.jar"/>
			<jarfileset dir="${staging.dir}" includes="dqguru.jar"/>
			<!-- Add any jdbc drivers as resources the directory jdbc is referenced
					in the manifest as well as various targets. -->
			<javafileset dir="${staging.dir}" includes="jdbc/*.jar jdbc/*.ini"/>
			<extraclasspathfilelist dir="KICKME" files="jdbc"/>
		</jarbundler>

		<!-- XXX this is stupid. we should modify the jarbundler task to allow literal strings in the classpath -->
		<replace file="${staging.dir}/DQguru.app/Contents/Info.plist"
				 token="${basedir}/KICKME"
				 value="$JAVAROOT" />

	</target>
		
	<!-- Creates a tarball containing only the Java source files -->
	<target name="source_only_tgz" depends="getAppVersion"
		description="Builds a source only tarball of the Architect">
		<mkdir dir="${dist.dir}"/>
		<tar destfile="${dist.dir}/DQguru-src-only-${app.version}.tar.gz"
			 compression="gzip" longfile="gnu">
			<tarfileset dir="."
				prefix="matchmaker-src-only-${app.version}"
				includes="${src}/**/*.java,
					  ${src}/**/*.png,
					  ${src}/**/*.gif,
					  ${src}/**/*.xml,
					  ${src}/**/*.sql,
					  ${src}/**/*.architect,
					  regress/**/*.java,
					  build.xml,
					  build.properties.example,
					  LICENSE,
					  README.sourceonly
					  "/>
		</tar>
	</target>
	
	
	<!-- This is needed to prevent a problem with DocBook help file generation 
		 in which the XSLT replaces the spaces in the path name with '%20', and
		 doesn't convert it back when saving the files. It looks like this is
		 related to the DocBook chunking functionality.
		 We don't know of any good way to fix this yet, so we have this
		 check for the time being.-->
	<target name="checkBuildPath" 
		description="Ensure the build path contains no spaces.">
		<echo message="Note: Your build path cannot contain any spaces at this point because of a problem with help file generation."/>
		<echo message="Checking build path..."/>
		<!-- Check if the build path is absolute. If so, set buildPath -->
		<condition property="buildPath" value="${build}">
			<or>
				<!-- Check for Windows style absolute pathnames-->
				<and>
					<or>
						<!-- pathname with backslash only -->
						<matches string="${build}" pattern="^\\{1}.*"/>
						<!-- pathname with drive letter -->
						<matches string="${build}" pattern="^[a-zA-Z]{1}:\\.*"/>
					</or>
					<os family="windows"/>
				</and>
				<!-- Check for Unix style absolute pathnames -->
				<and>
					<matches string="${build}" pattern="^//{1}.*"/>
					<not>
						<os family="windows"/>
					</not>
				</and>
			</or>
		</condition>
		<!-- Check if buildPath is set. If not, then it's a relative buildpath-->
		<condition property="buildPath" value="${basedir}\${build}">
			<and>
				<not>
					<isset property="buildPath"/>
				</not>
				<os family="windows"/>
			</and>
		</condition>
		<!-- Check if buildPath is set. If not, then it's not a windows buildpath (i.e. doesn't use '\')-->
		<condition property="buildPath" value="${basedir}/${build}">
			<not>
				<isset property="buildPath"/>
			</not>
		</condition>
		<echo message="Your build path is ${buildPath}"/>
		<!-- Now check the build path for spaces -->
	    <fail message="Your build path MUST NOT contain any spaces. See the file 'build.properties.example' to see how to set property 'build' to an absolute pathname that does not contain any spaces">
	    	<condition>
				<contains string="${buildPath}" substring=" "/>
	    	</condition>
		</fail>
	</target>
	
	<target name="osx_tgz" depends="osx_dist" if="isNotMac">
		<tar destfile="${dist.dir}/DQguru-OSX-${app.version}.tar.gz"
					compression="gzip">
			<tarfileset dir="${staging.dir}" includes="DQguru.app/**"/>
		</tar>
	</target>
	
	
	<target name="osx_dmg" depends="osx_dist" if="isMac">
		<!-- hdiutil create -size 50m -fs HFS+ -volname "Power*Architect" RWArchitect.dmg
				     hdiutil attach RWArchitect.dmg
				     (copy architect.app over, position it, etc)
				     /Developer/Tools/SetFile -a V /Volumes/Power\*Architect/install_folder_background.png
				     hdiutil detach /Volumes/Power\*Architect/
				     rm Power_Architect-1.0.19.dmg
				     hdiutil convert -format UDCO -o Power_Architect-1.0.19.dmg RWArchitect.dmg
				  -->
		<copy file="osx_packaging_utils/RWDQguru.dmg.sparseimage" tofile="${staging.dir}/RWDQguru.dmg.sparseimage" overwrite="true" />
		<exec executable="hdiutil">
					<arg value="detach" />
					<arg value="/Volumes/DQguru" />
		</exec>
		<exec executable="hdiutil">
			<arg value="attach" />
			<arg value="${staging.dir}/RWDQguru.dmg.sparseimage" />
		</exec>
		<delete dir="/Volumes/DQguru/DQguru.app/Contents/Resources/Java"/>
		<copy todir="/Volumes/DQguru/DQguru.app/" overwrite="true"  >
			<fileset dir="${staging.dir}/DQguru.app"></fileset>
		</copy>
		<exec executable="chmod">
			<arg value="a+x"/>
			<arg value="/Volumes/DQguru/DQguru.app/Contents/MacOS/DQguruStub"/>
		</exec>
		<exec executable="hdiutil">
			<arg value="detach" />
			<arg value="/Volumes/DQguru" />
		</exec>
		<delete file="${dist.dir}/DQguru-OSX-${app.version}.dmg" />
		<exec executable="hdiutil">
			<arg value="convert"/>
			<arg value="${staging.dir}/RWDQguru.dmg.sparseimage"/>
			<arg value="-format"/>
			<arg value="UDCO"/>
			<arg value="-o"/>
			<arg value="${dist.dir}/DQguru-OSX-${app.version}.dmg"/>
		</exec>

		<javac srcdir="osx_packaging_utils"
		   			   destdir="${build}"
					   includes="ca/sqlpower/antbuild/AddLicenseToDMGTask.java"
					   />
		
		<taskdef name="addLicenseToDMG"
				 classname="ca.sqlpower.antbuild.AddLicenseToDMGTask"
			     classpath="${build}"/>
		<addLicenseToDMG
				dmgFile="${dist.dir}/DQguru-OSX-${app.version}.dmg"
                licenseFile="${staging.dir}/LICENSE"
		        resourceTemplateFile="osx_packaging_utils/sla_template.r"/>
    </target>
	
	
	<!-- 
		This build target checks for the sqlpower-library project, which is
		required by the MatchMaker to build. 
	-->
	<target name="check.sqlpower.library.dir">
		<echo message="Checking for sqlpower-library project..."/>
		<fail message="Can't find sqlpower-library project! Set the property 'sqlpower.library.home' to point to the sqlpower-library project directory">
			<condition>
				<not>
					<isset property="sqlpower.library.home"/>
				</not>
			</condition>
		</fail>
	</target>
	
	<target name="build.sqlpower.library" depends="check.sqlpower.library.dir" if="buildSQLPowerLibrary">
		<echo message="Attempting to build sqlpower-library project..."/>
		<ant dir="${sqlpower.library.home}" target="clean">
			<property name="build" value="${sqlpower.library.home}/build"/>
		</ant>
		<ant dir="${sqlpower.library.home}" target="jar">
			<property name="build" value="${sqlpower.library.home}/build"/>
			<property name="dist.dir" value="${sqlpower.library.home}/dist"/>
		</ant>
	</target>
	
	<target name="copy.sqlpower.library" depends="check.sqlpower.library.dir">
		<copy file="${sqlpower.library.home}/build/sqlpower_library.jar" todir="${lib}"/>
	</target>
	
	
	<target name="clean">
		<delete dir="${build}"/>
		<delete dir="${staging.dir}"/>
	</target>

	
	<target name="dist-clean" depends="clean">
		<delete dir="${dist.base}"/>
	</target>
	
	
	<property name="pmd.home" value="ext-tools/pmd"/>
	<property name="pmd.jar" value="${pmd.home}/lib/pmd-4.2.jar"/>
	
	<target name="pmd" depends="getAppVersion"
		description="Runs the PMD code checking tool, saving results to a file."
		>
	 	<mkdir dir="${reports}"/>
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
			classpath="${pmd.jar}"/>
		<property name="pmd-results" value="${reports}/pmd-ant-results.${pmd.report.format}"/>
		<pmd shortFilenames="true" targetjdk="1.5">
			<ruleset>basic,imports</ruleset>
			<formatter type="${pmd.report.format}" toFile="${pmd-results}"/>
			<fileset dir="${src}">
				<include name="ca/sqlpower/**/*.java"/>
			</fileset>
		</pmd>
		<echo message="PMD completed, output is in ${pmd-results}."/>
	</target>
	
	<target name="pmd-cpd" depends="getAppVersion"
		description="Runs the PMD Copy/Paste Detection tool, and saves results to a file">
	 	<mkdir dir="${reports}"/>
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"
			classpath="${pmd.jar}"/>
		<property name="cpd-results" value="${reports}/cpd-ant-results.xml"/>
		<cpd encoding="UTF-8" minimumTokenCount="120" format="xml" outputfile="${cpd-results}">
			<fileset dir="${src}">
				<include name="ca/sqlpower/**/*.java"/>
				<exclude name="generated/**.java"/>
			</fileset>
		</cpd>
		<xslt in="${cpd-results}" style="${pmd.home}/etc/xslt/cpdhtml.xslt" out="${reports}/cpd-ant-results.html" />
		<echo message="CPD completed, output is in ${reports}/cpd-ant-results.html."/>
	</target>
	


	<target name="findbugs"
		description="Runs the FindBugs tool, outputs results to a text file"
		depends="compile, getAppVersion">
		<mkdir dir="${reports}"/>
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
			classpath="${findbugs-ant.jar}"/>
		<findbugs home="${findbugs.home}"
			output="${findbugs.report.format}"
			outputFile="${reports}/findbugs-ant-results.${findbugs.report.format}"
			reportLevel="low"
			jvmargs="-Xmx512m">  <!-- FindBugs can use up a lot of memory, so adjust the JVM memory here-->
			<class location="${build}" />
			<sourcePath path="${src}" />
			<!-- Classes needed by our code but that we don't want tested -->
			<auxClasspath path="${pmd.jar}" />
			<systemProperty name="findbugs.maskedfields.locals" value='true'/>
		</findbugs>
	</target>
	
	<target name="matchmaker.version.properties" depends="getAppVersion">
		<mkdir dir="${dist.dir}"/>
		<propertyfile
		    file="${dist.dir}/matchmaker.version.properties"
		    comment="DQguru Version">
		  <entry key="app.version" value="${app.version}"/>
		</propertyfile>
	</target>
</project>
