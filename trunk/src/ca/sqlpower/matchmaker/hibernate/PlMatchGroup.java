package ca.sqlpower.matchmaker.hibernate;
// Generated Sep 18, 2006 4:34:38 PM by Hibernate Tools 3.2.0.beta7


import java.io.Serializable;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

/**
 * PlMatchGroup generated by hbm2java, but maintained by hand
 */
public class PlMatchGroup extends DefaultHibernateObject<PlMatchCriterion>
	implements Serializable, Comparable<PlMatchGroup> {

    // Fields

     private Long id;
     private String groupId;
     private PlMatch plMatch;
     private String description;
     private Short matchPercent;
     private Date lastUpdateDate;
     private String lastUpdateUser;
     private String filterCriteria;
     /**
      * true if the match should be deactivated
      * false if it should be active
      */
     private boolean activeInd;
     private String lastUpdateOsUser;
     private Set<PlMatchCriterion> plMatchCriteria = new TreeSet<PlMatchCriterion>();
     private List<String> usedColumnNames = new ArrayList<String>();

     // Constructors

    /** default constructor */
    public PlMatchGroup() {
    	matchPercent = new Short("0");
    }

	@Override
    public int getChildCount() {
    	return plMatchCriteria.size();
    }

    @Override
    public List<PlMatchCriterion> getChildren() {
    	List<PlMatchCriterion> children = new ArrayList<PlMatchCriterion>();
    	for (PlMatchCriterion group : plMatchCriteria){
    		children.add(group);
    	}
    	Collections.sort(children);
    	return children;
    }

    public PlMatch getPlMatch() {
        return this.plMatch;
    }

    public void setPlMatch(PlMatch plMatch) {
    	if(plMatch!=this.plMatch){
    		this.plMatch = plMatch;
    		firePropertyChange("plMatch", this.plMatch, plMatch);
    	}
    }

    public String getDescription() {
        return this.description;
    }


    public Short getMatchPercent() {
        return this.matchPercent;
    }


    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }

    public String getLastUpdateUser() {
        return this.lastUpdateUser;
    }


    public String getFilterCriteria() {
        return this.filterCriteria;
    }


    public boolean isActiveInd() {
        return this.activeInd;
    }


    public String getLastUpdateOsUser() {
        return this.lastUpdateOsUser;
    }

    public Set<PlMatchCriterion> getPlMatchCriterias() {
        return Collections.unmodifiableSet(this.plMatchCriteria);
    }



    public boolean addPlMatchCriteria(PlMatchCriterion pmc) {
    	Set<PlMatchCriterion> oldCriteria=new HashSet<PlMatchCriterion>(getPlMatchCriterias());
    	boolean b = plMatchCriteria.add(pmc);
    	createUsedColumnList();
    	pmc.addAllHierarchicalChangeListeners(getHierarchicalChangeListeners());
    	firePropertyChange("plMatchCriterias", oldCriteria, getPlMatchCriterias());
    	return b;
    }

    private void createUsedColumnList() {
    	usedColumnNames.clear();
		for (PlMatchCriterion criterion: plMatchCriteria){
			usedColumnNames.add(criterion.getColumnName());
		}
	}

	public boolean removePlMatchCriteria(PlMatchCriterion pmc) {
		Set<PlMatchCriterion> oldCriteria=new HashSet<PlMatchCriterion>(getPlMatchCriterias());
    	boolean b = plMatchCriteria.remove(pmc);
    	createUsedColumnList();
    	pmc.removeAllHierarchicalChangeListeners(getHierarchicalChangeListeners());
    	firePropertyChange("plMatchCriterias", oldCriteria, getPlMatchCriterias());
    	return b;
    }

	public boolean removePlMatchCriteria(int i) {

		PlMatchCriterion pmc = (PlMatchCriterion)getChildren().get(i);
    	return removePlMatchCriteria(pmc);

	}
    public void clearPlMatchCriteria(){
    	Set<PlMatchCriterion> oldCriteria=new HashSet<PlMatchCriterion>(getPlMatchCriterias());
    	usedColumnNames.clear();
    	for(PlMatchCriterion pmc:getPlMatchCriterias()){
    		plMatchCriteria.remove(pmc);
        	pmc.removeAllHierarchicalChangeListeners(getHierarchicalChangeListeners());
    	}
    	firePropertyChange("plMatchCriterias", oldCriteria, getPlMatchCriterias());

    }


    public void setActiveInd(boolean activeInd) {
	if (this.activeInd!= activeInd){
		this.activeInd = activeInd;
		firePropertyChange("activeInd", this.activeInd, activeInd);
	}}


	public void setDescription(String description) {
	if (this.description!= description){
		this.description = description;
		firePropertyChange("description", this.description, description);
	}}


	public void setFilterCriteria(String filterCriteria) {
	if (this.filterCriteria!= filterCriteria){
		this.filterCriteria = filterCriteria;
		firePropertyChange("filterCriteria", this.filterCriteria, filterCriteria);
	}}


	public void setLastUpdateDate(Date lastUpdateDate) {
	if (this.lastUpdateDate!= lastUpdateDate){
		this.lastUpdateDate = lastUpdateDate;
		firePropertyChange("lastUpdateDate", this.lastUpdateDate, lastUpdateDate);
	}}


	public void setLastUpdateOsUser(String lastUpdateOsUser) {
	if (this.lastUpdateOsUser!= lastUpdateOsUser){
		this.lastUpdateOsUser = lastUpdateOsUser;
		firePropertyChange("lastUpdateOsUser", this.lastUpdateOsUser, lastUpdateOsUser);
	}}


	public void setLastUpdateUser(String lastUpdateUser) {
	if (this.lastUpdateUser!= lastUpdateUser){
		this.lastUpdateUser = lastUpdateUser;
		firePropertyChange("lastUpdateUser", this.lastUpdateUser, lastUpdateUser);
	}}


	public void setMatchPercent(Short matchPercent) {
		if (this.matchPercent != matchPercent){
			this.matchPercent = matchPercent;
			firePropertyChange("matchPercent", this.matchPercent, matchPercent);
		}
	}

	@Override
    public String toString() {
    	return getGroupId() +" ("+matchPercent+"%)";
    }

	@Override
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = PRIME * result + ((groupId == null) ? 0 : groupId.hashCode());
		result = PRIME * result + ((id == null) ? 0 : id.hashCode());
		result = PRIME * result + ((plMatch == null) ? 0 : plMatch.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (getClass() != obj.getClass())
			return false;
		final PlMatchGroup other = (PlMatchGroup) obj;
		if (groupId == null) {
			if (other.groupId != null)
				return false;
		} else if (!groupId.equals(other.groupId))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (plMatch == null) {
			if (other.plMatch != null)
				return false;
		} else if (!plMatch.equals(other.plMatch))
			return false;
		return true;
	}



	public int compareTo(PlMatchGroup other) {
	    
		if (other.getMatchPercent() == null && getMatchPercent() != null){
			return 1;
		}else if (other.getMatchPercent() != null && getMatchPercent() == null){
            return -1;
        }else if (other !=null && other.getMatchPercent().compareTo(getMatchPercent()) != 0){
			return other.getMatchPercent().compareTo(getMatchPercent());
		} else if (filterCriteria == null && other.getFilterCriteria() != null){
			return -1;
		} else if (filterCriteria != null && other.getFilterCriteria() == null){
            return 1;
        }else if (filterCriteria!=null && filterCriteria.compareTo(other.getFilterCriteria()) !=0) {
			return filterCriteria.compareTo(other.getFilterCriteria());
		} else if (getPlMatch().compareTo(getPlMatch()) !=0 ) {
			return getPlMatch().compareTo(other.getPlMatch());
		} else if (getGroupId() != null && other.getGroupId() != null) {
                return getGroupId().compareTo(other.getGroupId());
		} else if (other.getGroupId() != null && getGroupId() == null){
		    return -1;
        }else if (other.getGroupId() == null && getGroupId() != null){
            return 1;
        } else {
            return 0;
        }
	}


	public void setMatchPercent(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setMatchPercent(Short.valueOf(val));
		}
	}
	public void setLastUpdateDate(String val) throws ParseException {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
			setLastUpdateDate(df.parse(val));
		}
	}
	public void setActiveInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setActiveInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
	}

	public List<String> getUsedColumnNames() {
		createUsedColumnList();
		return usedColumnNames;
	}

	public String getGroupId() {
		return groupId;
	}

	public void setId(Long id) {
		if (this.id != id) {
			this.id = id;
			firePropertyChange("id", this.id, id);
		}
	}

	public Long getId() {
		return id;
	}

	public void setGroupId(String groupId) {
		if (this.groupId != groupId) {
			this.groupId = groupId;
			firePropertyChange("groupId", this.groupId, groupId);
		}
	}

    public int compareTo(String anotherString) {
        return description.compareTo(anotherString);
    }




}