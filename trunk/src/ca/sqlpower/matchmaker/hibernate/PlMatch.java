package ca.sqlpower.matchmaker.hibernate;
// Generated Sep 18, 2006 4:34:38 PM by Hibernate Tools 3.2.0.beta7


import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.event.ChangeEvent;

import org.apache.commons.beanutils.BeanUtils;


/**
 * PlMatch generated by hbm2java, but maintained by hand
 */
public class PlMatch extends DefaultHibernateObject implements java.io.Serializable {

    // Fields

     private String matchId;
     private String matchDesc;
     private String tableCatalog;
     private String tableOwner;
     private String matchTable;
     private String pkColumn;
     private String filter;
     private String resultsTable;
     private Date createDate;
     private Date lastUpdateDate;
     private String lastUpdateUser;
     private String sequenceName;
     private boolean compileFlag;
     private Short autoMatchThreshold;
     private String matchLogFileName;
     private boolean matchAppendToLogInd;
     private Long matchProcessCnt;
     private Long matchShowProgressFreq;
     private boolean matchDebugModeInd;
     private String matchRollbackSegmentName;
     private String mergeLogFileName;
     private String matchRunStatus;
     private String matchScriptFileName;
     private BigDecimal matchTotalSteps;
     private BigDecimal matchStepsCompleted;
     private BigDecimal matchRowsInserted;
     private Date matchLastRunDate;
     private String matchLastRunUser;
     private Date mergeCompletionDate;
     private String mergeScriptFileName;
     private String mergeLastUser;
     private String mergeRunStatus;
     private String mergeDesc;
     private boolean mergeAppendToLogInd;
     private BigDecimal mergeProcessCnt;
     private BigDecimal mergeShowProgressFreq;
     private boolean mergeDebugModeInd;
     private String mergeRollbackSegmentName;
     private boolean mergeAugmentNullInd;
     private BigDecimal mergeTotalSteps;
     private BigDecimal mergeStepsCompleted;
     private Date mergeLastRunDate;
     private String mergeLastRunUser;
     private String matchPackageName;
     private String matchProcedureNameAll;
     private String matchProcedureNameOne;
     private String mergePackageName;
     private String mergeProcedureName;
     private BigDecimal mergeRowsInserted;
     private String mergeStepDesc;
     private boolean mergeTablesBackupInd;
     private String matchTablePkColumnFormat;
     private String batchFileName;
     private String selectClause;
     private String fromClause;
     private String whereClause;
     private String resultsTableCatalog;
     private String resultsTableOwner;
     private boolean matchBreakInd;
     private String filterCriteria;
     private String matchType;
     private String lastUpdateOsUser;
     private String matchStepDesc;
     private String matchStatus;
     private BigDecimal lastBackupNo;
     private boolean checkedOutInd;
     private Date checkedOutDate;
     private String checkedOutUser;
     private String checkedOutOsUser;
     private String indexColumnName0;
     private String indexColumnName1;
     private String indexColumnName2;
     private String indexColumnName3;
     private String indexColumnName4;
     private String indexColumnName5;
     private String indexColumnName6;
     private String indexColumnName7;
     private String indexColumnName8;
     private String indexColumnName9;
     private String tempSourceTableName;
     private String tempCandDupTableName;
     private String fromClauseDb;
     private String indexColumnType0;
     private String indexColumnType1;
     private String indexColumnType2;
     private String indexColumnType3;
     private String indexColumnType4;
     private String indexColumnType5;
     private String indexColumnType6;
     private String indexColumnType7;
     private String indexColumnType8;
     private String indexColumnType9;
     private boolean truncateCandDupInd;
     private boolean matchSendEmailInd;
     private boolean mergeSendEmailInd;
     private String xrefCatalog;
     private String xrefOwner;
     private String xrefTableName;
     private boolean autoMatchActiveInd;
     private Set<PlMergeConsolidateCriteria> plMergeConsolidateCriterias = new TreeSet<PlMergeConsolidateCriteria>();
     private Set<PlMatchXrefMap> plMatchXrefMaps = new TreeSet<PlMatchXrefMap>();
     private Set<PlMergeCriteria> plMergeCriterias = new TreeSet<PlMergeCriteria>();
     private Set<PlMatchGroup> plMatchGroups = new TreeSet<PlMatchGroup>();
     private Set<PlFolder> folders = new TreeSet<PlFolder>();
     // Constructors

    public Set getFolders() {
		return folders;
	}

	public void setFolders(Set<PlFolder> folders) {
		this.folders = folders;
	}

	/** default constructor */
    public PlMatch() {

    }

	/** minimal constructor */
    public PlMatch(String matchId, String matchType) {
        this.matchId = matchId;
        this.matchType = matchType;
    }
    /** full constructor */
    public PlMatch(String matchId, String matchDesc, String tableCatalog,
    		String tableOwner, String matchTable, String pkColumn,
    		String filter, String resultsTable, Date createDate,
    		Date lastUpdateDate, String lastUpdateUser, String sequenceName,
    		boolean compileFlag, String mergeScriptFileName,
    		Short autoMatchThreshold, Date mergeCompletionDate,
    		String mergeLastUser, String mergeRunStatus, String mergeDesc,
    		String matchLogFileName, boolean matchAppendToLogInd,
    		Long matchProcessCnt, Long matchShowProgressFreq,
    		boolean matchDebugModeInd, String matchRollbackSegmentName,
    		String mergeLogFileName, boolean mergeAppendToLogInd,
    		BigDecimal mergeProcessCnt, BigDecimal mergeShowProgressFreq,
    		boolean mergeDebugModeInd, String mergeRollbackSegmentName,
    		boolean mergeAugmentNullInd, String matchRunStatus,
    		String matchScriptFileName, BigDecimal matchTotalSteps,
    		BigDecimal matchStepsCompleted, BigDecimal matchRowsInserted,
    		Date matchLastRunDate, String matchLastRunUser,
    		BigDecimal mergeTotalSteps, BigDecimal mergeStepsCompleted,
    		Date mergeLastRunDate, String mergeLastRunUser,
    		String matchPackageName, String matchProcedureNameAll,
    		String matchProcedureNameOne, String mergePackageName,
    		String mergeProcedureName, String matchTablePkColumnFormat,
    		BigDecimal mergeRowsInserted, String batchFileName,
    		String selectClause, String fromClause, String whereClause,
    		String resultsTableCatalog, String resultsTableOwner,
    		boolean matchBreakInd,
    		String filterCriteria, String matchType, String lastUpdateOsUser,
    		String matchStepDesc, String mergeStepDesc,
    		boolean mergeTablesBackupInd, String matchStatus,
    		BigDecimal lastBackupNo, boolean checkedOutInd,
    		Date checkedOutDate, String checkedOutUser,
    		String checkedOutOsUser, String indexColumnName0,
    		String indexColumnName1, String indexColumnName2,
    		String indexColumnName3, String indexColumnName4,
    		String indexColumnName5, String indexColumnName6,
    		String indexColumnName7, String indexColumnName8,
    		String indexColumnName9, String tempSourceTableName,
    		String tempCandDupTableName, String fromClauseDb,
    		String indexColumnType0, String indexColumnType1,
    		String indexColumnType2, String indexColumnType3,
    		String indexColumnType4, String indexColumnType5,
    		String indexColumnType6, String indexColumnType7,
    		String indexColumnType8, String indexColumnType9,
    		boolean truncateCandDupInd, boolean matchSendEmailInd,
    		boolean mergeSendEmailInd, String xrefCatalog, String xrefOwner,
    		String xrefTableName, boolean autoMatchActiveInd,
    		Set<PlMergeConsolidateCriteria> plMergeConsolidateCriterias,
    		Set<PlMatchXrefMap> plMatchXrefMaps,
    		Set<PlMergeCriteria> plMergeCriterias,
    		Set<PlMatchGroup> plMatchGroups, Set<PlFolder> folder) {

       this.matchId = matchId;
       this.matchDesc = matchDesc;
       this.tableCatalog = tableCatalog;
       this.tableOwner = tableOwner;
       this.matchTable = matchTable;
       this.pkColumn = pkColumn;
       this.filter = filter;
       this.resultsTable = resultsTable;
       this.createDate = createDate;
       this.lastUpdateDate = lastUpdateDate;
       this.lastUpdateUser = lastUpdateUser;
       this.sequenceName = sequenceName;
       this.compileFlag = compileFlag;
       this.mergeScriptFileName = mergeScriptFileName;
       this.autoMatchThreshold = autoMatchThreshold;
       this.mergeCompletionDate = mergeCompletionDate;
       this.mergeLastUser = mergeLastUser;
       this.mergeRunStatus = mergeRunStatus;
       this.mergeDesc = mergeDesc;
       this.matchLogFileName = matchLogFileName;
       this.matchAppendToLogInd = matchAppendToLogInd;
       this.matchProcessCnt = matchProcessCnt;
       this.matchShowProgressFreq = matchShowProgressFreq;
       this.matchDebugModeInd = matchDebugModeInd;
       this.matchRollbackSegmentName = matchRollbackSegmentName;
       this.mergeLogFileName = mergeLogFileName;
       this.mergeAppendToLogInd = mergeAppendToLogInd;
       this.mergeProcessCnt = mergeProcessCnt;
       this.mergeShowProgressFreq = mergeShowProgressFreq;
       this.mergeDebugModeInd = mergeDebugModeInd;
       this.mergeRollbackSegmentName = mergeRollbackSegmentName;
       this.mergeAugmentNullInd = mergeAugmentNullInd;
       this.matchRunStatus = matchRunStatus;
       this.matchScriptFileName = matchScriptFileName;
       this.matchTotalSteps = matchTotalSteps;
       this.matchStepsCompleted = matchStepsCompleted;
       this.matchRowsInserted = matchRowsInserted;
       this.matchLastRunDate = matchLastRunDate;
       this.matchLastRunUser = matchLastRunUser;
       this.mergeTotalSteps = mergeTotalSteps;
       this.mergeStepsCompleted = mergeStepsCompleted;
       this.mergeLastRunDate = mergeLastRunDate;
       this.mergeLastRunUser = mergeLastRunUser;
       this.matchPackageName = matchPackageName;
       this.matchProcedureNameAll = matchProcedureNameAll;
       this.matchProcedureNameOne = matchProcedureNameOne;
       this.mergePackageName = mergePackageName;
       this.mergeProcedureName = mergeProcedureName;
       this.matchTablePkColumnFormat = matchTablePkColumnFormat;
       this.mergeRowsInserted = mergeRowsInserted;
       this.batchFileName = batchFileName;
       this.selectClause = selectClause;
       this.fromClause = fromClause;
       this.whereClause = whereClause;
       this.resultsTableCatalog = resultsTableCatalog;
       this.resultsTableOwner = resultsTableOwner;
       this.matchBreakInd = matchBreakInd;
       this.filterCriteria = filterCriteria;
       this.matchType = matchType;
       this.lastUpdateOsUser = lastUpdateOsUser;
       this.matchStepDesc = matchStepDesc;
       this.mergeStepDesc = mergeStepDesc;
       this.mergeTablesBackupInd = mergeTablesBackupInd;
       this.matchStatus = matchStatus;
       this.lastBackupNo = lastBackupNo;
       this.checkedOutInd = checkedOutInd;
       this.checkedOutDate = checkedOutDate;
       this.checkedOutUser = checkedOutUser;
       this.checkedOutOsUser = checkedOutOsUser;
       this.indexColumnName0 = indexColumnName0;
       this.indexColumnName1 = indexColumnName1;
       this.indexColumnName2 = indexColumnName2;
       this.indexColumnName3 = indexColumnName3;
       this.indexColumnName4 = indexColumnName4;
       this.indexColumnName5 = indexColumnName5;
       this.indexColumnName6 = indexColumnName6;
       this.indexColumnName7 = indexColumnName7;
       this.indexColumnName8 = indexColumnName8;
       this.indexColumnName9 = indexColumnName9;
       this.tempSourceTableName = tempSourceTableName;
       this.tempCandDupTableName = tempCandDupTableName;
       this.fromClauseDb = fromClauseDb;
       this.indexColumnType0 = indexColumnType0;
       this.indexColumnType1 = indexColumnType1;
       this.indexColumnType2 = indexColumnType2;
       this.indexColumnType3 = indexColumnType3;
       this.indexColumnType4 = indexColumnType4;
       this.indexColumnType5 = indexColumnType5;
       this.indexColumnType6 = indexColumnType6;
       this.indexColumnType7 = indexColumnType7;
       this.indexColumnType8 = indexColumnType8;
       this.indexColumnType9 = indexColumnType9;
       this.truncateCandDupInd = truncateCandDupInd;
       this.matchSendEmailInd = matchSendEmailInd;
       this.mergeSendEmailInd = mergeSendEmailInd;
       this.xrefCatalog = xrefCatalog;
       this.xrefOwner = xrefOwner;
       this.xrefTableName = xrefTableName;
       this.autoMatchActiveInd = autoMatchActiveInd;
       this.plMergeConsolidateCriterias = plMergeConsolidateCriterias;
       this.plMatchXrefMaps = plMatchXrefMaps;
       this.plMergeCriterias = plMergeCriterias;
       this.plMatchGroups = plMatchGroups;
       this.folders = folder;
    }

    /**
     * Deep copy of this object
     * @return A deep copy of the PlXXX object
     */
    public PlMatch copyOf() {
    	try {
			PlMatch copy = (PlMatch) BeanUtils.cloneBean(this);

			// We need to re-create the Collections as well, with new instances and
			// recursive deep clones of each object therein...

			copy.plMergeConsolidateCriterias = new TreeSet<PlMergeConsolidateCriteria>();
			for (PlMergeConsolidateCriteria p : this.plMergeConsolidateCriterias) {
				plMergeConsolidateCriterias.add(p.copyOf());
			}
			copy.plMatchXrefMaps = new TreeSet<PlMatchXrefMap>();
			for (PlMatchXrefMap p : this.plMatchXrefMaps) {
				plMatchXrefMaps.add(p.copyOf());
			}
			copy.plMergeCriterias = new TreeSet<PlMergeCriteria>();;
			for (PlMergeCriteria p : this.plMergeCriterias) {
				plMergeCriterias.add(p.copyOf());
			}
			copy.plMatchGroups = new TreeSet<PlMatchGroup>();
			for (PlMatchGroup p : this.plMatchGroups) {
				plMatchGroups.add(new PlMatchGroup(p));
			}
			copy.folders = new TreeSet<PlFolder>();
			for (PlFolder p : folders) {
				folders.add(new PlFolder(p));
			}
			return copy;
		} catch (Exception e) {
			e.printStackTrace();
			throw new RuntimeException("Could not copy bean", e);
		}
	}

	// Property accessors
    public String getMatchId() {
        return this.matchId;
    }

    public String getMatchDesc() {
        return this.matchDesc;
    }

    public String getTableOwner() {
        return this.tableOwner;
    }

	public String getTableCatalog() {
		return tableCatalog;
	}

	public void setTableCatalog(String tableCatalog) {
		if (this.tableCatalog != tableCatalog) {
			this.tableCatalog = tableCatalog;
			fireChangeEvent(new ChangeEvent(this));
		}
	}


    public String getMatchTable() {
        return this.matchTable;
    }

    public String getPkColumn() {
        return this.pkColumn;
    }

    public String getFilter() {
        return this.filter;
    }

    public String getResultsTable() {
        return this.resultsTable;
    }

    public Date getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(String createDate) throws ParseException {
    	if ( createDate != null && createDate.length() > 0 ) {
    		DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    		setCreateDate(df.parse(createDate));
    	}
    }
    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }
    
    public void setLastUpdateDate(String lastUpdateDate) throws ParseException {
    	if ( lastUpdateDate != null && lastUpdateDate.length() > 0 ) {
    		DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
    		setLastUpdateDate(df.parse(lastUpdateDate));
    	}
    }

    public String getLastUpdateUser() {
        return this.lastUpdateUser;
    }

    public String getSequenceName() {
        return this.sequenceName;
    }

    public boolean isCompileFlag() {
        return this.compileFlag;
    }

   public void setCompileFlag(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setCompileFlag(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }

    public String getMergeScriptFileName() {
        return this.mergeScriptFileName;
    }

    public Short getAutoMatchThreshold() {
        return this.autoMatchThreshold;
    }

	public void setAutoMatchThreshold(String val) {
    	if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
    		setAutoMatchThreshold(Short.valueOf(val));
    	}
    }
    public Date getMergeCompletionDate() {
        return this.mergeCompletionDate;
    }

	public void setMergeCompletionDate(String mergeCompletionDate) throws ParseException {
    	if ( mergeCompletionDate != null && mergeCompletionDate.length() > 0 ) {
	    	DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	    	setMergeCompletionDate(df.parse(mergeCompletionDate));
    	}
    }
    public String getMergeLastUser() {
        return this.mergeLastUser;
    }

    public String getMergeRunStatus() {
        return this.mergeRunStatus;
    }

    public String getMergeDesc() {
        return this.mergeDesc;
    }

    public String getMatchLogFileName() {
        return this.matchLogFileName;
    }


    public boolean isMatchAppendToLogInd() {
        return this.matchAppendToLogInd;
    }

	public void setMatchAppendToLogInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMatchAppendToLogInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public Long getMatchProcessCnt() {
        return this.matchProcessCnt;
    }

	public void setMatchProcessCnt(String val) {
    	if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null")) {
    		setMatchProcessCnt(Long.valueOf(val));
    	}
    }
    
    public Long getMatchShowProgressFreq() {
        return this.matchShowProgressFreq;
    }

	public void setMatchShowProgressFreq(String val) {
    	if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null")) {
    		setMatchShowProgressFreq(Long.valueOf(val));
    	}
    }
    
    public boolean isMatchDebugModeInd() {
        return this.matchDebugModeInd;
    }

	public void setMatchDebugModeInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMatchDebugModeInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public String getMatchRollbackSegmentName() {
        return this.matchRollbackSegmentName;
    }

    public String getMergeLogFileName() {
        return this.mergeLogFileName;
    }

    public boolean isMergeAppendToLogInd() {
        return this.mergeAppendToLogInd;
    }

	public void setMergeAppendToLogInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMergeAppendToLogInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public BigDecimal getMergeProcessCnt() {
        return this.mergeProcessCnt;
    }
    
    public void setMergeProcessCnt(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMergeProcessCnt(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }

    public BigDecimal getMergeShowProgressFreq() {
        return this.mergeShowProgressFreq;
    }

	public void setMergeShowProgressFreq(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMergeShowProgressFreq(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }

    public boolean isMergeDebugModeInd() {
        return this.mergeDebugModeInd;
    }
	public void setMergeDebugModeInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMergeDebugModeInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    public String getMergeRollbackSegmentName() {
        return this.mergeRollbackSegmentName;
    }
    
    public boolean isMergeAugmentNullInd() {
        return this.mergeAugmentNullInd;
    }

	public void setMergeAugmentNullInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMergeAugmentNullInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    public String getMatchRunStatus() {
        return this.matchRunStatus;
    }

    public String getMatchScriptFileName() {
        return this.matchScriptFileName;
    }

    public BigDecimal getMatchTotalSteps() {
        return this.matchTotalSteps;
    }
    
	public void setMatchTotalSteps(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMatchTotalSteps(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }
    
    public BigDecimal getMatchStepsCompleted() {
        return this.matchStepsCompleted;
    }
	
	public void setMatchStepsCompleted(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMatchStepsCompleted(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }
    
    public BigDecimal getMatchRowsInserted() {
        return this.matchRowsInserted;
    }
	
	public void setMatchRowsInserted(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMatchRowsInserted(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }
	
    public Date getMatchLastRunDate() {
        return this.matchLastRunDate;
    }
	
	public void setMatchLastRunDate(String matchLastRunDate) throws ParseException {
    	if ( matchLastRunDate != null && matchLastRunDate.length() > 0 ) {
	    	DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	    	setMatchLastRunDate(df.parse(matchLastRunDate));
    	}
    }
	
    public String getMatchLastRunUser() {
        return this.matchLastRunUser;
    }

    public BigDecimal getMergeTotalSteps() {
        return this.mergeTotalSteps;
    }

	public void setMergeTotalSteps(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMergeTotalSteps(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }
    
    public BigDecimal getMergeStepsCompleted() {
        return this.mergeStepsCompleted;
    }
	
	public void setMergeStepsCompleted(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMergeStepsCompleted(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }
    
    public Date getMergeLastRunDate() {
        return this.mergeLastRunDate;
    }

	public void setMergeLastRunDate(String mergeLastRunDate) throws ParseException {
    	if ( mergeLastRunDate != null && mergeLastRunDate.length() > 0 ) {
	    	DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	    	setMergeLastRunDate(df.parse(mergeLastRunDate));
    	}
    }
    
    public String getMergeLastRunUser() {
        return this.mergeLastRunUser;
    }

    public String getMatchPackageName() {
        return this.matchPackageName;
    }

    public String getMatchProcedureNameAll() {
        return this.matchProcedureNameAll;
    }

    public String getMatchProcedureNameOne() {
        return this.matchProcedureNameOne;
    }

    public String getMergePackageName() {
        return this.mergePackageName;
    }

    public String getMergeProcedureName() {
        return this.mergeProcedureName;
    }

    public String getMatchTablePkColumnFormat() {
        return this.matchTablePkColumnFormat;
    }

   
    public BigDecimal getMergeRowsInserted() {
        return this.mergeRowsInserted;
    }

  	public void setMergeRowsInserted(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setMergeRowsInserted(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }
    
    public String getBatchFileName() {
        return this.batchFileName;
    }


    public String getSelectClause() {
        return this.selectClause;
    }

   
    public String getFromClause() {
        return this.fromClause;
    }

  
    public String getWhereClause() {
        return this.whereClause;
    }


    public String getResultsTableOwner() {
        return this.resultsTableOwner;
    }


    public boolean isMatchBreakInd() {
        return this.matchBreakInd;
    }

	public void setMatchBreakInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMatchBreakInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public String getFilterCriteria() {
        return this.filterCriteria;
    }


    public String getMatchType() {
        return this.matchType;
    }


    public String getLastUpdateOsUser() {
        return this.lastUpdateOsUser;
    }

 
    public String getMatchStepDesc() {
        return this.matchStepDesc;
    }


    public String getMergeStepDesc() {
        return this.mergeStepDesc;
    }


    public boolean isMergeTablesBackupInd() {
        return this.mergeTablesBackupInd;
    }

	public void setMergeTablesBackupInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMergeTablesBackupInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public String getMatchStatus() {
        return this.matchStatus;
    }

 
    public BigDecimal getLastBackupNo() {
        return this.lastBackupNo;
    }

	public void setLastBackupNo(String val) {
        if ( val != null && val.length() > 0 && !val.equalsIgnoreCase("null") ) {
        	setLastBackupNo(BigDecimal.valueOf(Long.valueOf(val)));
        }
    }
	
    public boolean isCheckedOutInd() {
        return this.checkedOutInd;
    }

	public void setCheckedOutInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setCheckedOutInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public Date getCheckedOutDate() {
        return this.checkedOutDate;
    }

 	public void setCheckedOutDate(String checkedOutDate) throws ParseException {
    	if ( checkedOutDate != null && checkedOutDate.length() > 0 ) {
	    	DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
	    	setCheckedOutDate(df.parse(checkedOutDate));
    	}
    }
    
    public String getCheckedOutUser() {
        return this.checkedOutUser;
    }

 
    public String getCheckedOutOsUser() {
        return this.checkedOutOsUser;
    }


    public String getIndexColumnName0() {
        return this.indexColumnName0;
    }


    public String getIndexColumnName1() {
        return this.indexColumnName1;
    }


    public String getIndexColumnName2() {
        return this.indexColumnName2;
    }

    public String getIndexColumnName3() {
        return this.indexColumnName3;
    }

  
    public String getIndexColumnName4() {
        return this.indexColumnName4;
    }


    public String getIndexColumnName5() {
        return this.indexColumnName5;
    }

  
    public String getIndexColumnName6() {
        return this.indexColumnName6;
    }

  
    public String getIndexColumnName7() {
        return this.indexColumnName7;
    }


    public String getIndexColumnName8() {
        return this.indexColumnName8;
    }


    public String getIndexColumnName9() {
        return this.indexColumnName9;
    }


    public String getTempSourceTableName() {
        return this.tempSourceTableName;
    }


    public String getTempCandDupTableName() {
        return this.tempCandDupTableName;
    }


    public String getFromClauseDb() {
        return this.fromClauseDb;
    }


    public String getIndexColumnType0() {
        return this.indexColumnType0;
    }


    public String getIndexColumnType1() {
        return this.indexColumnType1;
    }

    public String getIndexColumnType2() {
        return this.indexColumnType2;
    }


    public String getIndexColumnType3() {
        return this.indexColumnType3;
    }


    public String getIndexColumnType4() {
        return this.indexColumnType4;
    }

 
    public String getIndexColumnType5() {
        return this.indexColumnType5;
    }

 
    public String getIndexColumnType6() {
        return this.indexColumnType6;
    }


    public String getIndexColumnType7() {
        return this.indexColumnType7;
    }


    public String getIndexColumnType8() {
        return this.indexColumnType8;
    }

    public String getIndexColumnType9() {
        return this.indexColumnType9;
    }


    public boolean isTruncateCandDupInd() {
        return this.truncateCandDupInd;
    }
	public void setTruncateCandDupInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setTruncateCandDupInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public boolean isMatchSendEmailInd() {
        return this.matchSendEmailInd;
    }

	public void setMatchSendEmailInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMatchSendEmailInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public boolean isMergeSendEmailInd() {
        return this.mergeSendEmailInd;
    }

 	public void setMergeSendEmailInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setMergeSendEmailInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public String getXrefOwner() {
        return this.xrefOwner;
    }


    public String getXrefTableName() {
        return this.xrefTableName;
    }

   
    public boolean isAutoMatchActiveInd() {
        return this.autoMatchActiveInd;
    }

    public void setAutoMatchActiveInd(String val) {
    	if ( val != null && val.length() > 0 ) {
    		setAutoMatchActiveInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
    	}
    }
    
    public Set<PlMergeConsolidateCriteria> getPlMergeConsolidateCriterias() {
        return Collections.unmodifiableSet(this.plMergeConsolidateCriterias);
    }

    public Set<PlMatchXrefMap> getPlMatchXrefMaps() {
        return Collections.unmodifiableSet(this.plMatchXrefMaps);
    }

    public Set<PlMergeCriteria> getPlMergeCriterias() {
        return Collections.unmodifiableSet(this.plMergeCriterias);
    }


    public Set<PlMatchGroup> getPlMatchGroups() {
        return Collections.unmodifiableSet(this.plMatchGroups);
    }



    @Override
    public String toString() {
    	return matchId;
    }

    @Override
    public int getChildCount() {
    	return plMatchGroups.size();
    }

    @Override
    public List<DefaultHibernateObject> getChildren() {
    	List<DefaultHibernateObject> children = new ArrayList<DefaultHibernateObject>();
    	for (PlMatchGroup group : plMatchGroups){
    		children.add(group);
    	}
    	Collections.sort(children);
    	return children;
    }



	@Override
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		result = PRIME * result + ((matchId == null) ? 0 : matchId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final PlMatch other = (PlMatch) obj;
		if (matchId == null) {
			if (other.matchId != null)
				return false;
		} else if (!matchId.equals(other.matchId))
			return false;
		return true;
	}

	public int compareTo(Object o) {
		final PlMatch other = (PlMatch) o;
		return matchId.compareTo(other.getMatchId());
	}

	public String getResultsTableCatalog() {
		return resultsTableCatalog;
	}

	public void setResultsTableCatalog(String resultsTableCatalog) {
		if (this.resultsTableCatalog != resultsTableCatalog) {
			this.resultsTableCatalog = resultsTableCatalog;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public String getXrefCatalog() {
		return xrefCatalog;
	}

	public void setXrefCatalog(String xrefCatalog) {
		if (this.xrefCatalog != xrefCatalog) {
			this.xrefCatalog = xrefCatalog;
			fireChangeEvent(new ChangeEvent(this));
		}
	}
	
	/**
	 * add for xml parser
	 * 
	 * 
	 */
	public void xmlAddMatchGroup(PlMatchGroup g) {
		addPlMatchGroups(g);
		g.setPlMatch(this);
	}
	public void xmlAddMatchCriteria(PlMatchCriteria c) {
		for ( PlMatchGroup g : getPlMatchGroups() ) {
			PlMatchGroupId id = new PlMatchGroupId(c.getId().getMatchId(),
					c.getId().getGroupId());
			if ( id.equals(g.getId()) ) {
				g.addPlMatchCriteria(c);
				c.setPlMatchGroup(g);
				break;
			}
		}
	}
	public void xmlAddMergeCriteria(PlMergeCriteria c) {
		plMergeCriterias.add(c);
		c.setPlMatch(this);
	}

	public void xmlAddMergeConsolidateCriteria(PlMergeConsolidateCriteria c) {
		plMergeConsolidateCriterias.add(c);
		c.setPlMatch(this);
	}

	public void setAutoMatchActiveInd(boolean autoMatchActiveInd) {
		if (this.autoMatchActiveInd != autoMatchActiveInd) {
			this.autoMatchActiveInd = autoMatchActiveInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setAutoMatchThreshold(Short autoMatchThreshold) {
		if (this.autoMatchThreshold != autoMatchThreshold) {
			this.autoMatchThreshold = autoMatchThreshold;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setBatchFileName(String batchFileName) {
		if (this.batchFileName != batchFileName) {
			this.batchFileName = batchFileName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setCheckedOutDate(Date checkedOutDate) {
		if (this.checkedOutDate != checkedOutDate) {
			this.checkedOutDate = checkedOutDate;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setCheckedOutInd(boolean checkedOutInd) {
		if (this.checkedOutInd != checkedOutInd) {
			this.checkedOutInd = checkedOutInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setCheckedOutOsUser(String checkedOutOsUser) {
		if (this.checkedOutOsUser != checkedOutOsUser) {
			this.checkedOutOsUser = checkedOutOsUser;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setCheckedOutUser(String checkedOutUser) {
		if (this.checkedOutUser != checkedOutUser) {
			this.checkedOutUser = checkedOutUser;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setCompileFlag(boolean compileFlag) {
		if (this.compileFlag != compileFlag) {
			this.compileFlag = compileFlag;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setCreateDate(Date createDate) {
		if (this.createDate != createDate) {
			this.createDate = createDate;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setFilter(String filter) {
		if (this.filter != filter) {
			this.filter = filter;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setFilterCriteria(String filterCriteria) {
		if (this.filterCriteria != filterCriteria) {
			this.filterCriteria = filterCriteria;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setFromClause(String fromClause) {
		if (this.fromClause != fromClause) {
			this.fromClause = fromClause;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setFromClauseDb(String fromClauseDb) {
		if (this.fromClauseDb != fromClauseDb) {
			this.fromClauseDb = fromClauseDb;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName0(String indexColumnName0) {
		if (this.indexColumnName0 != indexColumnName0) {
			this.indexColumnName0 = indexColumnName0;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName1(String indexColumnName1) {
		if (this.indexColumnName1 != indexColumnName1) {
			this.indexColumnName1 = indexColumnName1;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName2(String indexColumnName2) {
		if (this.indexColumnName2 != indexColumnName2) {
			this.indexColumnName2 = indexColumnName2;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName3(String indexColumnName3) {
		if (this.indexColumnName3 != indexColumnName3) {
			this.indexColumnName3 = indexColumnName3;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName4(String indexColumnName4) {
		if (this.indexColumnName4 != indexColumnName4) {
			this.indexColumnName4 = indexColumnName4;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName5(String indexColumnName5) {
		if (this.indexColumnName5 != indexColumnName5) {
			this.indexColumnName5 = indexColumnName5;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName6(String indexColumnName6) {
		if (this.indexColumnName6 != indexColumnName6) {
			this.indexColumnName6 = indexColumnName6;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName7(String indexColumnName7) {
		if (this.indexColumnName7 != indexColumnName7) {
			this.indexColumnName7 = indexColumnName7;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName8(String indexColumnName8) {
		if (this.indexColumnName8 != indexColumnName8) {
			this.indexColumnName8 = indexColumnName8;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnName9(String indexColumnName9) {
		if (this.indexColumnName9 != indexColumnName9) {
			this.indexColumnName9 = indexColumnName9;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType0(String indexColumnType0) {
		if (this.indexColumnType0 != indexColumnType0) {
			this.indexColumnType0 = indexColumnType0;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType1(String indexColumnType1) {
		if (this.indexColumnType1 != indexColumnType1) {
			this.indexColumnType1 = indexColumnType1;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType2(String indexColumnType2) {
		if (this.indexColumnType2 != indexColumnType2) {
			this.indexColumnType2 = indexColumnType2;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType3(String indexColumnType3) {
		if (this.indexColumnType3 != indexColumnType3) {
			this.indexColumnType3 = indexColumnType3;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType4(String indexColumnType4) {
		if (this.indexColumnType4 != indexColumnType4) {
			this.indexColumnType4 = indexColumnType4;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType5(String indexColumnType5) {
		if (this.indexColumnType5 != indexColumnType5) {
			this.indexColumnType5 = indexColumnType5;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType6(String indexColumnType6) {
		if (this.indexColumnType6 != indexColumnType6) {
			this.indexColumnType6 = indexColumnType6;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType7(String indexColumnType7) {
		if (this.indexColumnType7 != indexColumnType7) {
			this.indexColumnType7 = indexColumnType7;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType8(String indexColumnType8) {
		if (this.indexColumnType8 != indexColumnType8) {
			this.indexColumnType8 = indexColumnType8;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setIndexColumnType9(String indexColumnType9) {
		if (this.indexColumnType9 != indexColumnType9) {
			this.indexColumnType9 = indexColumnType9;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setLastBackupNo(BigDecimal lastBackupNo) {
		if (this.lastBackupNo != lastBackupNo) {
			this.lastBackupNo = lastBackupNo;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setLastUpdateDate(Date lastUpdateDate) {
		if (this.lastUpdateDate != lastUpdateDate) {
			this.lastUpdateDate = lastUpdateDate;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setLastUpdateOsUser(String lastUpdateOsUser) {
		if (this.lastUpdateOsUser != lastUpdateOsUser) {
			this.lastUpdateOsUser = lastUpdateOsUser;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setLastUpdateUser(String lastUpdateUser) {
		if (this.lastUpdateUser != lastUpdateUser) {
			this.lastUpdateUser = lastUpdateUser;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchAppendToLogInd(boolean matchAppendToLogInd) {
		if (this.matchAppendToLogInd != matchAppendToLogInd) {
			this.matchAppendToLogInd = matchAppendToLogInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchBreakInd(boolean matchBreakInd) {
		if (this.matchBreakInd != matchBreakInd) {
			this.matchBreakInd = matchBreakInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchDebugModeInd(boolean matchDebugModeInd) {
		if (this.matchDebugModeInd != matchDebugModeInd) {
			this.matchDebugModeInd = matchDebugModeInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchDesc(String matchDesc) {
		if (this.matchDesc != matchDesc) {
			this.matchDesc = matchDesc;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchId(String matchId) {
		if (this.matchId != matchId) {
			this.matchId = matchId;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchLastRunDate(Date matchLastRunDate) {
		if (this.matchLastRunDate != matchLastRunDate) {
			this.matchLastRunDate = matchLastRunDate;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchLastRunUser(String matchLastRunUser) {
		if (this.matchLastRunUser != matchLastRunUser) {
			this.matchLastRunUser = matchLastRunUser;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchLogFileName(String matchLogFileName) {
		if (this.matchLogFileName != matchLogFileName) {
			this.matchLogFileName = matchLogFileName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchPackageName(String matchPackageName) {
		if (this.matchPackageName != matchPackageName) {
			this.matchPackageName = matchPackageName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchProcedureNameAll(String matchProcedureNameAll) {
		if (this.matchProcedureNameAll != matchProcedureNameAll) {
			this.matchProcedureNameAll = matchProcedureNameAll;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchProcedureNameOne(String matchProcedureNameOne) {
		if (this.matchProcedureNameOne != matchProcedureNameOne) {
			this.matchProcedureNameOne = matchProcedureNameOne;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchProcessCnt(Long matchProcessCnt) {
		if (this.matchProcessCnt != matchProcessCnt) {
			this.matchProcessCnt = matchProcessCnt;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchRollbackSegmentName(String matchRollbackSegmentName) {
		if (this.matchRollbackSegmentName != matchRollbackSegmentName) {
			this.matchRollbackSegmentName = matchRollbackSegmentName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchRowsInserted(BigDecimal matchRowsInserted) {
		if (this.matchRowsInserted != matchRowsInserted) {
			this.matchRowsInserted = matchRowsInserted;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchRunStatus(String matchRunStatus) {
		if (this.matchRunStatus != matchRunStatus) {
			this.matchRunStatus = matchRunStatus;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchScriptFileName(String matchScriptFileName) {
		if (this.matchScriptFileName != matchScriptFileName) {
			this.matchScriptFileName = matchScriptFileName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchSendEmailInd(boolean matchSendEmailInd) {
		if (this.matchSendEmailInd != matchSendEmailInd) {
			this.matchSendEmailInd = matchSendEmailInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchShowProgressFreq(Long matchShowProgressFreq) {
		if (this.matchShowProgressFreq != matchShowProgressFreq) {
			this.matchShowProgressFreq = matchShowProgressFreq;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchStatus(String matchStatus) {
		if (this.matchStatus != matchStatus) {
			this.matchStatus = matchStatus;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchStepDesc(String matchStepDesc) {
		if (this.matchStepDesc != matchStepDesc) {
			this.matchStepDesc = matchStepDesc;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchStepsCompleted(BigDecimal matchStepsCompleted) {
		if (this.matchStepsCompleted != matchStepsCompleted) {
			this.matchStepsCompleted = matchStepsCompleted;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchTable(String matchTable) {
		if (this.matchTable != matchTable) {
			this.matchTable = matchTable;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchTablePkColumnFormat(String matchTablePkColumnFormat) {
		if (this.matchTablePkColumnFormat != matchTablePkColumnFormat) {
			this.matchTablePkColumnFormat = matchTablePkColumnFormat;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchTotalSteps(BigDecimal matchTotalSteps) {
		if (this.matchTotalSteps != matchTotalSteps) {
			this.matchTotalSteps = matchTotalSteps;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMatchType(String matchType) {
		if (this.matchType != matchType) {
			this.matchType = matchType;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeAppendToLogInd(boolean mergeAppendToLogInd) {
		if (this.mergeAppendToLogInd != mergeAppendToLogInd) {
			this.mergeAppendToLogInd = mergeAppendToLogInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeAugmentNullInd(boolean mergeAugmentNullInd) {
		if (this.mergeAugmentNullInd != mergeAugmentNullInd) {
			this.mergeAugmentNullInd = mergeAugmentNullInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeCompletionDate(Date mergeCompletionDate) {
		if (this.mergeCompletionDate != mergeCompletionDate) {
			this.mergeCompletionDate = mergeCompletionDate;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeDebugModeInd(boolean mergeDebugModeInd) {
		if (this.mergeDebugModeInd != mergeDebugModeInd) {
			this.mergeDebugModeInd = mergeDebugModeInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeDesc(String mergeDesc) {
		if (this.mergeDesc != mergeDesc) {
			this.mergeDesc = mergeDesc;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeLastRunDate(Date mergeLastRunDate) {
		if (this.mergeLastRunDate != mergeLastRunDate) {
			this.mergeLastRunDate = mergeLastRunDate;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeLastRunUser(String mergeLastRunUser) {
		if (this.mergeLastRunUser != mergeLastRunUser) {
			this.mergeLastRunUser = mergeLastRunUser;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeLastUser(String mergeLastUser) {
		if (this.mergeLastUser != mergeLastUser) {
			this.mergeLastUser = mergeLastUser;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeLogFileName(String mergeLogFileName) {
		if (this.mergeLogFileName != mergeLogFileName) {
			this.mergeLogFileName = mergeLogFileName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergePackageName(String mergePackageName) {
		if (this.mergePackageName != mergePackageName) {
			this.mergePackageName = mergePackageName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeProcedureName(String mergeProcedureName) {
		if (this.mergeProcedureName != mergeProcedureName) {
			this.mergeProcedureName = mergeProcedureName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeProcessCnt(BigDecimal mergeProcessCnt) {
		if (this.mergeProcessCnt != mergeProcessCnt) {
			this.mergeProcessCnt = mergeProcessCnt;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeRollbackSegmentName(String mergeRollbackSegmentName) {
		if (this.mergeRollbackSegmentName != mergeRollbackSegmentName) {
			this.mergeRollbackSegmentName = mergeRollbackSegmentName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeRowsInserted(BigDecimal mergeRowsInserted) {
		if (this.mergeRowsInserted != mergeRowsInserted) {
			this.mergeRowsInserted = mergeRowsInserted;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeRunStatus(String mergeRunStatus) {
		if (this.mergeRunStatus != mergeRunStatus) {
			this.mergeRunStatus = mergeRunStatus;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeScriptFileName(String mergeScriptFileName) {
		if (this.mergeScriptFileName != mergeScriptFileName) {
			this.mergeScriptFileName = mergeScriptFileName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeSendEmailInd(boolean mergeSendEmailInd) {
		if (this.mergeSendEmailInd != mergeSendEmailInd) {
			this.mergeSendEmailInd = mergeSendEmailInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeShowProgressFreq(BigDecimal mergeShowProgressFreq) {
		if (this.mergeShowProgressFreq != mergeShowProgressFreq) {
			this.mergeShowProgressFreq = mergeShowProgressFreq;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeStepDesc(String mergeStepDesc) {
		if (this.mergeStepDesc != mergeStepDesc) {
			this.mergeStepDesc = mergeStepDesc;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeStepsCompleted(BigDecimal mergeStepsCompleted) {
		if (this.mergeStepsCompleted != mergeStepsCompleted) {
			this.mergeStepsCompleted = mergeStepsCompleted;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeTablesBackupInd(boolean mergeTablesBackupInd) {
		if (this.mergeTablesBackupInd != mergeTablesBackupInd) {
			this.mergeTablesBackupInd = mergeTablesBackupInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setMergeTotalSteps(BigDecimal mergeTotalSteps) {
		if (this.mergeTotalSteps != mergeTotalSteps) {
			this.mergeTotalSteps = mergeTotalSteps;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setPkColumn(String pkColumn) {
		if (this.pkColumn != pkColumn) {
			this.pkColumn = pkColumn;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	private void setPlMatchGroups(Set<PlMatchGroup> plMatchGroups) {
		if (this.plMatchGroups != plMatchGroups) {
			this.plMatchGroups = plMatchGroups;
			fireChangeEvent(new ChangeEvent(this));
		}
	}
	
	public void addAllPlMatchGroups(Set<PlMatchGroup> groups){
		for (PlMatchGroup pmg: groups){
			plMatchGroups.add(pmg);
	    	pmg.addAllHierachialChangeListener(getHierachialChangeListeners());
		}
		fireChangeEvent(new ChangeEvent(this));
	}
	
    public boolean addPlMatchGroups(PlMatchGroup pmg) {
    	boolean b = plMatchGroups.add(pmg);
    	pmg.addAllHierachialChangeListener(getHierachialChangeListeners());
    	fireChangeEvent(new ChangeEvent(this));
    	return b;
    }
    
    public boolean removePlMatchGroups(PlMatchGroup pmg) {
    	boolean b = plMatchGroups.remove(pmg);
    	pmg.removeAllHierachialChangeListener(getHierachialChangeListeners());
    	fireChangeEvent(new ChangeEvent(this));
    	return b;
    }
    
    public void clearPlMatchGroups(){
    	for(PlMatchGroup pmg:getPlMatchGroups()){
    		plMatchGroups.remove(pmg);
        	pmg.removeAllHierachialChangeListener(getHierachialChangeListeners());
    	}
    	fireChangeEvent(new ChangeEvent(this));
 
    }

	private void setPlMatchXrefMaps(Set<PlMatchXrefMap> plMatchXrefMaps) {
		if (this.plMatchXrefMaps != plMatchXrefMaps) {
			this.plMatchXrefMaps = plMatchXrefMaps;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	private void setPlMergeConsolidateCriterias(Set<PlMergeConsolidateCriteria> plMergeConsolidateCriterias) {
		if (this.plMergeConsolidateCriterias != plMergeConsolidateCriterias) {
			this.plMergeConsolidateCriterias = plMergeConsolidateCriterias;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	private void setPlMergeCriterias(Set<PlMergeCriteria> plMergeCriterias) {
		if (this.plMergeCriterias != plMergeCriterias) {
			this.plMergeCriterias = plMergeCriterias;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setResultsTable(String resultsTable) {
		if (this.resultsTable != resultsTable) {
			this.resultsTable = resultsTable;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setResultsTableOwner(String resultsTableOwner) {
		if (this.resultsTableOwner != resultsTableOwner) {
			this.resultsTableOwner = resultsTableOwner;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setSelectClause(String selectClause) {
		if (this.selectClause != selectClause) {
			this.selectClause = selectClause;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setSequenceName(String sequenceName) {
		if (this.sequenceName != sequenceName) {
			this.sequenceName = sequenceName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setTableOwner(String tableOwner) {
		if (this.tableOwner != tableOwner) {
			this.tableOwner = tableOwner;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setTempCandDupTableName(String tempCandDupTableName) {
		if (this.tempCandDupTableName != tempCandDupTableName) {
			this.tempCandDupTableName = tempCandDupTableName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setTempSourceTableName(String tempSourceTableName) {
		if (this.tempSourceTableName != tempSourceTableName) {
			this.tempSourceTableName = tempSourceTableName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setTruncateCandDupInd(boolean truncateCandDupInd) {
		if (this.truncateCandDupInd != truncateCandDupInd) {
			this.truncateCandDupInd = truncateCandDupInd;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setWhereClause(String whereClause) {
		if (this.whereClause != whereClause) {
			this.whereClause = whereClause;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setXrefOwner(String xrefOwner) {
		if (this.xrefOwner != xrefOwner) {
			this.xrefOwner = xrefOwner;
			fireChangeEvent(new ChangeEvent(this));
		}
	}

	public void setXrefTableName(String xrefTableName) {
		if (this.xrefTableName != xrefTableName) {
			this.xrefTableName = xrefTableName;
			fireChangeEvent(new ChangeEvent(this));
		}
	}



}


