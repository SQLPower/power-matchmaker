package ca.sqlpower.matchmaker.hibernate;
// Generated Sep 18, 2006 4:34:38 PM by Hibernate Tools 3.2.0.beta7


import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.beanutils.BeanUtils;

/**
 * PlMatchCriterion generated by hbm2java, but maintained by hand
 */
public class PlMatchCriterion extends DefaultHibernateObject implements java.io.Serializable {

    // Fields

     private PlMatchCriterionId id;
     private PlMatchGroup plMatchGroup;
     /**
      * True if the search should be case insensitive
      * False if the search should be case sensitive
      */
     private boolean caseSensitiveInd;
     private String suppressChar;
     private boolean soundInd;
     private Long firstNChar;
     private Date lastUpdateDate;
     private String lastUpdateUser;
     private BigDecimal seqNo;
     private boolean matchStart;
     private boolean matchEnd;
     private BigDecimal varianceAmt;
     private String varianceType;
     private String lastUpdateOsUser;
     private boolean allowNullInd;
     private String translateGroupName;
     private boolean removeSpecialChars;
     private boolean countWordsInd;
     private boolean replaceWithSpaceInd;
     private String replaceWithSpace;
     private boolean reorderInd;
     private boolean firstNCharByWordInd;
     private Long firstNCharByWord;
     private Long minWordsInCommon;
     private Long wordsInCommonNumWords;
     private boolean matchFirstPlusOneInd;

     // Constructors

    /** default constructor */
    public PlMatchCriterion() {
    }

    /** partial constructor */
    public PlMatchCriterion(PlMatchCriterionId id, PlMatchGroup plMatchGroup,PlMatchCriterion criteria) {
    	this.id = id;
        this.plMatchGroup = plMatchGroup;

        this.caseSensitiveInd = criteria.caseSensitiveInd;
        this.suppressChar = criteria.suppressChar;
        this.soundInd = criteria.soundInd;
        this.firstNChar = criteria.firstNChar;
        this.lastUpdateDate = criteria.lastUpdateDate;
        this.lastUpdateUser = criteria.lastUpdateUser;
        this.seqNo = criteria.seqNo;
        this.matchStart = criteria.matchStart;
        this.matchEnd = criteria.matchEnd;
        this.varianceAmt = criteria.varianceAmt;
        this.varianceType = criteria.varianceType;
        this.lastUpdateOsUser = criteria.lastUpdateOsUser;
        this.allowNullInd = criteria.allowNullInd;
        this.translateGroupName = criteria.translateGroupName;
        this.removeSpecialChars = criteria.removeSpecialChars;
        this.countWordsInd = criteria.countWordsInd;
        this.replaceWithSpaceInd = criteria.replaceWithSpaceInd;
        this.replaceWithSpace = criteria.replaceWithSpace;
        this.reorderInd = criteria.reorderInd;
        this.firstNCharByWordInd = criteria.firstNCharByWordInd;
        this.firstNCharByWord = criteria.firstNCharByWord;
        this.minWordsInCommon = criteria.minWordsInCommon;
        this.wordsInCommonNumWords = criteria.wordsInCommonNumWords;
        this.matchFirstPlusOneInd = criteria.matchFirstPlusOneInd;
    }

	/** minimal constructor */
    public PlMatchCriterion(PlMatchCriterionId id, PlMatchGroup plMatchGroup) {
        this.id = id;
        this.plMatchGroup = plMatchGroup;
    }

    /** full constructor */
    public PlMatchCriterion(PlMatchCriterionId id, PlMatchGroup plMatchGroup, boolean caseSensitiveInd, String suppressChar, boolean soundInd, Long firstNChar, Date lastUpdateDate, String lastUpdateUser, BigDecimal seqNo, boolean matchStart, boolean matchEnd, BigDecimal varianceAmt, String varianceType, String lastUpdateOsUser, boolean allowNullInd, String translateGroupName, boolean removeSpecialChars, boolean countWordsInd, boolean replaceWithSpaceInd, String replaceWithSpace, boolean reorderInd, boolean firstNCharByWordInd, Long firstNCharByWord, Long minWordsInCommon, Long wordsInCommonNumWords, boolean matchFirstPlusOneInd) {
       this.id = id;
       this.plMatchGroup = plMatchGroup;
       this.caseSensitiveInd = caseSensitiveInd;
       this.suppressChar = suppressChar;
       this.soundInd = soundInd;
       this.firstNChar = firstNChar;
       this.lastUpdateDate = lastUpdateDate;
       this.lastUpdateUser = lastUpdateUser;
       this.seqNo = seqNo;
       this.matchStart = matchStart;
       this.matchEnd = matchEnd;
       this.varianceAmt = varianceAmt;
       this.varianceType = varianceType;
       this.lastUpdateOsUser = lastUpdateOsUser;
       this.allowNullInd = allowNullInd;
       this.translateGroupName = translateGroupName;
       this.removeSpecialChars = removeSpecialChars;
       this.countWordsInd = countWordsInd;
       this.replaceWithSpaceInd = replaceWithSpaceInd;
       this.replaceWithSpace = replaceWithSpace;
       this.reorderInd = reorderInd;
       this.firstNCharByWordInd = firstNCharByWordInd;
       this.firstNCharByWord = firstNCharByWord;
       this.minWordsInCommon = minWordsInCommon;
       this.wordsInCommonNumWords = wordsInCommonNumWords;
       this.matchFirstPlusOneInd = matchFirstPlusOneInd;
    }

    /** Copy Constructor */
    public PlMatchCriterion copyOf() {
    	// Copy all the "simple" properties first
    	try {
    		PlMatchCriterion copy = (PlMatchCriterion) BeanUtils.cloneBean(this);
    		// Now copy the non-trivial parts
    		copy.id = id.copyOf();
    	    copy.plMatchGroup = plMatchGroup.copyOf();
    	    copy.lastUpdateDate = new Date(System.currentTimeMillis());
    	    return copy;
		} catch (Exception e) {
			throw new RuntimeException("Could not Copy", e);
		}
	}

	// Property accessors
    public PlMatchCriterionId getId() {
        return this.id;
    }

    public void setId(PlMatchCriterionId id) {
        this.id = id;
    }
    public PlMatchGroup getPlMatchGroup() {
        return this.plMatchGroup;
    }

    public void setPlMatchGroup(PlMatchGroup plMatchGroup) {
        this.plMatchGroup = plMatchGroup;
    }
    public boolean isCaseSensitiveInd() {
        return this.caseSensitiveInd;
    }

    public void setCaseSensitiveInd(boolean caseSensitiveInd) {
        this.caseSensitiveInd = caseSensitiveInd;
    }
    public String getSuppressChar() {
        return this.suppressChar;
    }


    public boolean isSoundInd() {
        return this.soundInd;
    }


    public Long getFirstNChar() {
        return this.firstNChar;
    }

 
    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }


    public String getLastUpdateUser() {
        return this.lastUpdateUser;
    }


    public BigDecimal getSeqNo() {
        return this.seqNo;
    }


    public boolean isMatchStart() {
        return this.matchStart;
    }


    public boolean isMatchEnd() {
        return this.matchEnd;
    }


    public BigDecimal getVarianceAmt() {
        return this.varianceAmt;
    }


    public String getVarianceType() {
        return this.varianceType;
    }

 
    public String getLastUpdateOsUser() {
        return this.lastUpdateOsUser;
    }

    public boolean isAllowNullInd() {
        return this.allowNullInd;
    }


    public String getTranslateGroupName() {
        return this.translateGroupName;
    }


    public boolean isRemoveSpecialChars() {
        return this.removeSpecialChars;
    }


    public boolean isCountWordsInd() {
        return this.countWordsInd;
    }

 
    public boolean isReplaceWithSpaceInd() {
        return this.replaceWithSpaceInd;
    }


    public String getReplaceWithSpace() {
        return this.replaceWithSpace;
    }


    public boolean isReorderInd() {
        return this.reorderInd;
    }


    public boolean isFirstNCharByWordInd() {
        return this.firstNCharByWordInd;
    }


    public Long getFirstNCharByWord() {
        return this.firstNCharByWord;
    }


    public Long getMinWordsInCommon() {
        return this.minWordsInCommon;
    }


    public Long getWordsInCommonNumWords() {
        return this.wordsInCommonNumWords;
    }


    public boolean isMatchFirstPlusOneInd() {
        return this.matchFirstPlusOneInd;
    }



	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		PlMatchCriterion other = (PlMatchCriterion) obj;
		return id.equals(other.getId());
	}

	@Override
	public int hashCode() {
		return id.hashCode();
	}

	public int compareTo(Object o) {
		if (this.equals(o)) return 0;
		PlMatchCriterion other = (PlMatchCriterion) o;
		if (id.getMatchId().compareTo(other.getId().getMatchId())!=0 ) {
			return id.getMatchId().compareTo(other.getId().getMatchId());
		} else if (id.getGroupId().compareTo(other.getId().getGroupId()) != 0 ){
			return id.getGroupId().compareTo(other.getId().getGroupId());
		} else if (id.getColumnName() != null ){
			if (other.getId().getColumnName() == null ) return -1;
			return id.getColumnName().compareTo(other.getId().getColumnName());
		} else {
			return other.getId().getColumnName() == null ? 0:1;
		}
	}

	

		/* for xml parser, overwrite all method that don't take String parameter,
	 * also create id when set matchId or groupId
	 *
	 */
	public void setMatchId(String id) {
		if ( this.id == null ) {
			this.id = new PlMatchCriterionId();
		}
		this.id.setMatchId(id);
	}
	public void setGroupId(String id) {
		if ( this.id == null ) {
			this.id = new PlMatchCriterionId();
		}
		this.id.setGroupId(id);
	}
	public void setColumnName(String id) {
		if ( this.id == null ) {
			this.id = new PlMatchCriterionId();
		}
		this.id.setColumnName(id);
	}



	public void setCountWordsInd(boolean countWordsInd) {
		if (this.countWordsInd != countWordsInd) {
			firePropertyChange("this.countWordsInd", this.countWordsInd, countWordsInd);
			this.countWordsInd = countWordsInd;
		}
	}

	public void setFirstNChar(Long firstNChar) {
		if (this.firstNChar != firstNChar) {
			firePropertyChange("this.firstNChar", this.firstNChar, firstNChar);
			this.firstNChar = firstNChar;
		}
	}

	public void setFirstNCharByWord(Long firstNCharByWord) {
		if (this.firstNCharByWord != firstNCharByWord) {
			firePropertyChange("this.firstNCharByWord", this.firstNCharByWord, firstNCharByWord);
			this.firstNCharByWord = firstNCharByWord;
		}
	}

	public void setFirstNCharByWordInd(boolean firstNCharByWordInd) {
		if (this.firstNCharByWordInd != firstNCharByWordInd) {
			firePropertyChange("this.firstNCharByWordInd", this.firstNCharByWordInd, firstNCharByWordInd);
			this.firstNCharByWordInd = firstNCharByWordInd;
		}
	}

	public void setLastUpdateDate(Date lastUpdateDate) {
		if (this.lastUpdateDate != lastUpdateDate) {
			firePropertyChange("this.lastUpdateDate", this.lastUpdateDate, lastUpdateDate);
			this.lastUpdateDate = lastUpdateDate;
		}
	}

	public void setLastUpdateOsUser(String lastUpdateOsUser) {
		if (this.lastUpdateOsUser != lastUpdateOsUser) {
			firePropertyChange("this.lastUpdateOsUser", this.lastUpdateOsUser, lastUpdateOsUser);
			this.lastUpdateOsUser = lastUpdateOsUser;
		}
	}

	public void setLastUpdateUser(String lastUpdateUser) {
		if (this.lastUpdateUser != lastUpdateUser) {
			firePropertyChange("this.lastUpdateUser", this.lastUpdateUser, lastUpdateUser);
			this.lastUpdateUser = lastUpdateUser;
		}
	}

	public void setMatchEnd(boolean matchEnd) {
		if (this.matchEnd != matchEnd) {
			firePropertyChange("this.matchEnd", this.matchEnd, matchEnd);
			this.matchEnd = matchEnd;
		}
	}

	public void setMatchFirstPlusOneInd(boolean matchFirstPlusOneInd) {
		if (this.matchFirstPlusOneInd != matchFirstPlusOneInd) {
			firePropertyChange("this.matchFirstPlusOneInd", this.matchFirstPlusOneInd, matchFirstPlusOneInd);
			this.matchFirstPlusOneInd = matchFirstPlusOneInd;
		}
	}

	public void setMatchStart(boolean matchStart) {
		if (this.matchStart != matchStart) {
			firePropertyChange("this.matchStart", this.matchStart, matchStart);
			this.matchStart = matchStart;
		}
	}

	public void setMinWordsInCommon(Long minWordsInCommon) {
		if (this.minWordsInCommon != minWordsInCommon) {
			firePropertyChange("this.minWordsInCommon", this.minWordsInCommon, minWordsInCommon);
			this.minWordsInCommon = minWordsInCommon;
		}
	}

	public void setRemoveSpecialChars(boolean removeSpecialChars) {
		if (this.removeSpecialChars != removeSpecialChars) {
			firePropertyChange("this.removeSpecialChars", this.removeSpecialChars, removeSpecialChars);
			this.removeSpecialChars = removeSpecialChars;
		}
	}

	public void setReorderInd(boolean reorderInd) {
		if (this.reorderInd != reorderInd) {
			firePropertyChange("this.reorderInd", this.reorderInd, reorderInd);
			this.reorderInd = reorderInd;
		}
	}

	public void setReplaceWithSpace(String replaceWithSpace) {
		if (this.replaceWithSpace != replaceWithSpace) {
			firePropertyChange("this.replaceWithSpace", this.replaceWithSpace, replaceWithSpace);
			this.replaceWithSpace = replaceWithSpace;
		}
	}

	public void setReplaceWithSpaceInd(boolean replaceWithSpaceInd) {
		if (this.replaceWithSpaceInd != replaceWithSpaceInd) {
			firePropertyChange("this.replaceWithSpaceInd", this.replaceWithSpaceInd, replaceWithSpaceInd);
			this.replaceWithSpaceInd = replaceWithSpaceInd;
		}
	}

	public void setSeqNo(BigDecimal seqNo) {
		if (this.seqNo != seqNo) {
			firePropertyChange("this.seqNo", this.seqNo, seqNo);
			this.seqNo = seqNo;
		}
	}

	public void setSoundInd(boolean soundInd) {
		if (this.soundInd != soundInd) {
			firePropertyChange("this.soundInd", this.soundInd, soundInd);
			this.soundInd = soundInd;
		}
	}

	public void setSuppressChar(String suppressChar) {
		if (this.suppressChar != suppressChar) {
			firePropertyChange("this.suppressChar", this.suppressChar, suppressChar);
			this.suppressChar = suppressChar;
		}
	}

	public void setTranslateGroupName(String translateGroupName) {
		if (this.translateGroupName != translateGroupName) {
			firePropertyChange("this.translateGroupName", this.translateGroupName, translateGroupName);
			this.translateGroupName = translateGroupName;
		}
	}

	public void setVarianceAmt(BigDecimal varianceAmt) {
		if (this.varianceAmt != varianceAmt) {
			firePropertyChange("this.varianceAmt", this.varianceAmt, varianceAmt);
			this.varianceAmt = varianceAmt;
		}
	}

	public void setVarianceType(String varianceType) {
		if (this.varianceType != varianceType) {
			firePropertyChange("this.varianceType", this.varianceType, varianceType);
			this.varianceType = varianceType;
		}
	}

	public void setWordsInCommonNumWords(Long wordsInCommonNumWords) {
		if (this.wordsInCommonNumWords != wordsInCommonNumWords) {
			firePropertyChange("this.wordsInCommonNumWords", this.wordsInCommonNumWords, wordsInCommonNumWords);
			this.wordsInCommonNumWords = wordsInCommonNumWords;
		}
	}

	public void setAllowNullInd(boolean allowNullInd) {
		if (this.allowNullInd != allowNullInd) {
			firePropertyChange("this.allowNullInd", this.allowNullInd, allowNullInd);
			this.allowNullInd = allowNullInd;
		}
	}

	public void setCaseSensitiveInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setCaseSensitiveInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setSoundInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setSoundInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setMatchStart(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setMatchStart(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setMatchEnd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setMatchEnd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setAllowNullInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setAllowNullInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }

	public void setRemoveSpecialChars(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setRemoveSpecialChars(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setCountWordsInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setCountWordsInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setReplaceWithSpaceInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setReplaceWithSpaceInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setReorderInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setReorderInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setFirstNCharByWordInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setFirstNCharByWordInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setMatchFirstPlusOneInd(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setMatchFirstPlusOneInd(val.charAt(0) == 'y' || val.charAt(0) == 'Y');
		}
    }
	public void setFirstNChar(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setFirstNChar(Long.valueOf(val));
		}
    }
	public void setFirstNCharByWord(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setFirstNCharByWord(Long.valueOf(val));
		}
    }
	public void setMinWordsInCommon(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setMinWordsInCommon(Long.valueOf(val));
		}
    }
	public void setWordsInCommonNumWords(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setWordsInCommonNumWords(Long.valueOf(val));
		}
    }
	public void setLastUpdateDate(String val) throws ParseException {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
			setLastUpdateDate(df.parse(val));
		}
    }
	public void setSeqNo(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setSeqNo(BigDecimal.valueOf(Long.valueOf(val)));
		}
    }
	public void setVarianceAmt(String val) {
		if ( val != null && val.length()>0 && !val.equalsIgnoreCase("null")) {
			setVarianceAmt(BigDecimal.valueOf(Long.valueOf(val)));
		}
    }



}

