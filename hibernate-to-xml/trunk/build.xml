<project name="matchmaker" default="repository-exporter" basedir=".">

	<!-- $Id$ -->
	<!-- get the version number from source code MatchMakerUtils -->

	<property file="build.properties"/>
	<property name="src" value="src"/>
	<property name="build" value="build"/>
	<property name="build.tests" value="${build}"/>
	<property name="lib" value="lib"/>
	<property name="buildlib" value="buildlib"/>
	
	<!-- The staging directory is a temp dir that is used as a base for all
	     the OS-dependant distributions -->
	<property name="staging.dir" value="staging"/>
	<property name="dist.base" value="dist"/>
	
	<!-- Windows installer tool: izpack (needs both a jar and its own
		     directory to run properly) -->
	<property name="izpack.dir" value="ext-tools/izpack"/>
	<taskdef name="izpack" classpath="${izpack.dir}/lib/standalone-compiler.jar"
		     classname="com.izforge.izpack.ant.IzPackTask"/>

	<!-- Base directory for the izpack (Windows) installer output -->
	<property name="installer.dir" value="installer"/>
	
	<!-- findbugs code checking tool -->
	<property name="findbugs.home" value="ext-tools/findbugs"/>
	<property name="findbugs-ant.jar" value="${findbugs.home}/lib/findbugs-ant.jar"/>
	
	<!-- When the build runs on a Mac, we can create the .dmg disk image
	     using the native hdiutil program.  Otherwise, we just make a .tar.gz.
	-->
	<condition property="isMac">
		<os family="mac"/>
	</condition>

	<condition property="isNotMac">
		<not>
			<os family="mac"/>
		</not>
	</condition>
	
	<!-- When the build runs on Windows, we can create the .exe executable
	     using the izpack2exe's exe tool. Otherwise, we would use python
	     along with the python izpack2exe python script.
	-->
	<condition property="isWindows">
		<os family="windows"/>
	</condition>

	<condition property="isNotWindows">
		<not>
			<os family="windows"/>
		</not>
	</condition>
	
	<!-- 
		Actually, I wanted to test for if this is Linux so to know which
		launch4j binaries to use, but unfortunately, there is no 'linux' 
		value, just unix. So if it's unix, then we will try to use the linux binary.
	-->
	<condition property="isUnix">
		<os family="unix"/>
	</condition>

	<condition property="isNotUnix">
		<not>
			<os family="unix"/>
		</not>
	</condition>
	
	<condition property="launch4j.dir" value="ext-tools/launch4j/launch4j-macosx" >
		<isset property="isMac"/>
	</condition>
	
	<condition property="launch4j.dir" value="ext-tools/launch4j/launch4j-linux" >
		<isset property="isUnix"/>
	</condition>
	
	<condition property="launch4j.dir" value="ext-tools/launch4j/launch4j-win32" >
		<isset property="isWindows"/>
	</condition>
	
	<taskdef name="launch4j"
	    classname="net.sf.launch4j.ant.Launch4jTask"
	    classpath="${launch4j.dir}/launch4j.jar
	        :${launch4j.dir}/lib/xstream.jar" />
	
	<!-- 
		Sets if we want to actually run a build on the SQL Power Library.
		It may be useful to set it to copy only if we already know that the
		library has been built. For example, when running the builds on a 
		continuous integration engine like Hudson, where the library can be
		built separately.
	-->
	<condition property="buildSQLPowerLibrary">
		<not>
			<isset property="only.copy.sqlpower.library"/>
		</not>
	</condition>
	
	<!--
		Set the format of the findbugs report to html by default
	-->
	<condition property="findbugs.report.format" value="html">
		<not>
			<isset property="findbugs.report.format"/>
		</not>
	</condition>
	
	<!--
		Set the format of the pmd report to html by default
	-->
	<condition property="pmd.report.format" value="html">
		<not>
			<isset property="pmd.report.format"/>
		</not>
	</condition>
	
	
	<!-- A path that will include all jars in the lib and buildlib folders -->
	<path id="compile.classpath">
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${buildlib}">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<path id="test.classpath">
		<pathelement location="${build}"/>
		<fileset dir="lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="buildlib">
			<include name="*.jar"/>
		</fileset>
	</path>
	
	<!-- Compiles the MatchMaker and places the .class files into build-->
	<target name="compile" depends="build.sqlpower.library, copy.sqlpower.library, copyfiles">
		<mkdir dir="${build}"/>
		<javac 	srcdir="${src}" 
				destdir="${build}" 
				classpathref="compile.classpath"
			    source="1.6"
				debug="true"
		/>
	</target>
	
	<!-- This target creates a jar that can be used to import all of the projects from an old
	Hibernate repository into a new version of MatchMaker -->
	<target name="repository-exporter" depends="stage">
		<mkdir dir="${dist.base}"/>
		<zip destfile="${dist.base}/repository-export.zip" basedir="${staging.dir}">
	    </zip>
    </target>

	<!-- Compiles the MatchMaker and places the .class files into build-->
	<target name="javadoc" depends="getAppVersion,compile">
		<mkdir dir="${dist.base}/doc/api"/>
		<javadoc sourcepath="${src}" destdir="${dist.base}/doc/api"
			packagenames="ca.sqlpower.*"
			maxmemory="100m"
			windowtitle="ca.sqlpower.matchmaker.* Power*MatchMaker"
			Version="true" Author="true" Use="true"
			classpathref="test.classpath"
			>
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="ca/sqlpower/**" />
				<exclude name="regress/**"/>
			</packageset>
			<bottom><![CDATA[<i>Copyright &#169; 2003-2008 SQL Power Group Inc. <a href="http://www.sqlpower.ca/">www.sqlpower.ca</a>]]></bottom>
		</javadoc>
	</target>

	<target name="copyfiles" depends="matchmaker.version.properties">
	    <mkdir dir="${build}/icons"/>
	    <copy todir="${build}/icons">
	        <fileset dir="src/icons/">
	            <include name="**/*.gif"/>
	            <include name="**/*.png"/>
	            <include name="**/*.icns"/>
	        </fileset>
	    </copy>
		
		<copy todir="${build}/ca/sqlpower/matchmaker/dao/hibernate">
			<fileset dir="src/ca/sqlpower/matchmaker/dao/hibernate">
				<include name="*.xml"/>
				<include name="*.sql"/>
				<include name="*.architect"/>
			</fileset>
		</copy>
		
		<copy todir="${build}/ca/sqlpower/matchmaker/address">
			<fileset dir="src/ca/sqlpower/matchmaker/address">
				<include name="*.property"/>
			</fileset>
		</copy>
		
		<copy file="${dist.base}/matchmaker.version.properties" todir="${build}/ca/sqlpower/matchmaker"/>
		
		<!-- copies the template log4j config file into the build dir -->
		<copy tofile="${build}/log4j.properties"
			file="src/log4j.properties.example"/>
	</target>
	
	
	

	<!-- Compiles the regression test suite -->
	<target name="compile-tests" depends="compile">
		<mkdir dir="${build.tests}"/>
		<javac srcdir="regress" destdir="${build.tests}"
			classpathref="test.classpath"
			debug="true"/>
	</target>
	
	<!-- DOCUMENTATION
		There are THREE main documentation targets, all built from the
		docbook XML file docs/PowerArchitectUsersGuide:
			help - JavaHelp (jarred and shipped)
			html - for quick viewing on our web site
			PDF - because we can :-)
	-->

	<!-- Create an intermediate docbook document - for use both by help and html -
	with no width attributes on the images (the Swing HTML browser chokes
	when there is width but no height in an image tag)
	-->
	<target name="xslt-stripwidths">
		<xslt
			style="doc/tools/strip-width.xsl"
			in="doc/DQguruUserGuide.xml"
			out="${java.io.tmpdir}/DQguruUserGuide-nowidth.xml"
			classpathref="docbookclasspath">
		</xslt>
	</target>

	<!-- Build the HTML -->
	<target name="html" depends="checkBuildPath, xslt-stripwidths" description="Create user guide in HTML">
		<mkdir dir="${build}/doc/html" />

		<xslt
			style="doc/tools/xslt/html/docbook.xsl"
			in="${java.io.tmpdir}/DQguruUserGuide-nowidth.xml"
			out="${build}/doc/html/DQguruUserGuide.html"
			classpathref="docbookclasspath">
		</xslt>

		<!-- Warning: This is an extremely evil hack to get the product out the door!
		              See bugzilla 1195 for details -->
		<mkdir dir="${build}/ca/sqlpower/matchmaker/doc/doc/images" />
		<copy todir="${build}/doc/html/doc/images" overwrite="true">
			<fileset dir="doc/images">
				<include name="*.png"/>
			</fileset>
		</copy>
	</target>

	<!-- Runs the test suite -->
	<target name="junit" depends="getAppVersion, compile-tests">
	 	<mkdir dir="${reports}"/>
		<property name="reports.junit" value="${reports}/junit"/>
		<mkdir dir="${reports.junit}"/>
		<!-- Output all System.out and System.err messages -->
	   <junit printsummary="on" maxmemory="512m">
	   	   <sysproperty key="ca.sqlpower.matchmaker.test.dir" value="${build.tests}"/>
	       <classpath>
	       		<path refid="test.classpath"/>
	       		<path path="${build.tests}"/>
	       </classpath>
	       <test name="ca.sqlpower.matchmaker.MatchMakerAllTests" todir="${reports.junit}"/>
	   	   <formatter type="xml"/>
	   </junit>
		<!-- Generate HTML report -->
		<junitreport todir="${reports.junit}">
		  <fileset dir="${reports.junit}">
		    <include name="TEST-*.xml" />
		  </fileset>
		  <report todir="${reports.junit}" />
		</junitreport>
	</target>
	
	
	<target name="stage" depends="getAppVersion, compile">
		<mkdir dir="${dist.base}" />
        <mkdir dir="${staging.dir}"/>
        <mkdir dir="${staging.dir}/lib"/>
        <mkdir dir="${staging.dir}/jdbc"/>
    	<mkdir dir="${staging.dir}/doc"/>
		
    	<copy todir="${staging.dir}/lib">
    	    <fileset dir="lib" includes="*.jar"/>
    	</copy>
		
		<manifestclasspath property="dqguru.jar.classpath" jarfile="${staging.dir}/repository-export.jar">
    		<classpath>
	    		<pathelement path="${staging.dir}/jdbc"/>
    			<fileset dir="${staging.dir}/">
    				<include name="lib/*.jar"/>
    			</fileset>
    		</classpath>
    	 </manifestclasspath>

    	<manifest file="${build}/manifest">
    		<attribute name="Main-Class" value="ca.sqlpower.matchmaker.swingui.LoginDialog"/>
    		<attribute name="Class-Path" value="${dqguru.jar.classpath}" />
    	</manifest>

    	<jar destfile="${staging.dir}/repository-export.jar" update="no"
    				basedir="${build}" 
    				includes="ca/** org/** icons/** log4j.properties default_database_types.ini"
    				manifest="${build}/manifest">
    	</jar>
		
    	<launch4j>
			<config dontwrapjar="true" 
					headertype="gui"
					jarpath="repository-export.jar"
					outfile="${staging.dir}/repository-export.exe"
					errtitle="Java Runtime Required"
					priority="normal"
					downloadurl="http://java.com/download"
					supporturl="http://www.sqlpower.ca/forum"
					customprocname="false"
					stayalive="false"
					icon="src/icons/dqguru.ico">
				<jre minVersion="1.6.0"
					 maxHeapSize="600"
				/>
			</config>
		</launch4j>
		
		<copy todir="${staging.dir}/lib">
    	    <fileset dir="lib" includes="*.jar"/>
    	</copy>
		
		<copy todir="${staging.dir}/jdbc">
		    <fileset dir="jdbc_drivers" includes="*.jar"/>
			<fileset dir="src" includes="default_database_types.ini"/>
	    </copy>
		
		<copy todir="${staging.dir}" file="LICENSE"/>
		<copy todir="${staging.dir}" file="LEGAL"/>
		<copy todir="${staging.dir}" file="installer/repository-export.sh"/>
		<chmod file="${staging.dir}/repository-export.sh" perm="u+x"/>
		<copy todir="${staging.dir}" file="installer/repository-export.bat"/>
		<chmod file="${staging.dir}/repository-export.bat" perm="u+x"/>
		
	</target>
	
	
	<target name="getAppVersion">
		<mkdir dir="${build}"/>
		<!-- get the version number from source code ArchitectUtils -->
		<delete file="${build}/ca/sqlpower/matchmaker/antbuild/MatchMakerVersionTask.class"/>
		<javac srcdir="${src}" destdir="${build}" classpathref="compile.classpath" includes="ca/sqlpower/matchmaker/antbuild/MatchMakerVersionTask.java" debug="true"/>
		<taskdef name="genVersion"
					classname="ca.sqlpower.matchmaker.antbuild.MatchMakerVersionTask"
			        classpath="${build}"/>
		<genVersion/>
		<tstamp>
			<format property="date" pattern="yyyyMMddHHmmss"/>
		</tstamp>
		<condition property="app.ver.suffix" value="-${date}">
			<isset property="nightly"/>
		</condition>
		<!-- Else, if app_ver_suffix is empty, then don't use a suffix -->
		<condition property="app.ver.suffix" value="">
			<and>
				<equals arg1="${app_ver_suffix}" arg2=""/>
				<not><isset property="app.ver.suffix"/></not>
			</and>
		</condition>
		<!-- otherwise, use the normal app_ver_suffix as the suffix -->
		<condition property="app.ver.suffix" value="-${app_ver_suffix}">
			<not><isset property="app.ver.suffix"/></not>
		</condition>

		<property name="app.version" value="${app_ver_major}.${app_ver_minor}.${app_ver_tiny}${app.ver.suffix}"/>
		<property name="reports" value="${dist.base}/reports"/>

		<condition property="downloadLinkBase" value="http://nightlybuild.sqlpower.ca/matchmaker/nightly/${app.version}">
			<isset property="nightly"/>
		</condition>
		
		<condition property="docLinkBase" value="${downloadLinkBase}">
			<isset property="nightly"/>		
		</condition>
		<condition property="downloadLinkBase"
			value="http://power-matchmaker.googlecode.com/files">
			<not><isset property="downloadLinkBase"/></not>
		</condition>
		<condition property="docLinkBase" 
			value="http://download.sqlpower.ca/dqguru/${app.version}">
			<not><isset property="docLinkBase"/></not>
		</condition>

		<echo message="Building DQguru version: ${app.version}"/>
	</target>
	
	
	<target name="windows_jar_installer" depends="stage">
		<izpack output="${dist.base}/SQL-Power-DQguru-Setup-Windows-${app.version}.jar"
		        installerType="standard"
			    basedir="${installer.dir}"
		        izPackDir="${izpack.dir}/">
			<config><![CDATA[
				<installation version="1.0">
					<!-- comment -->
					<info>
						<appname>SQL Power DQguru</appname>
						<appversion>@{app.version}</appversion>
						<url>http://www.sqlpower.ca/</url>
						<javaversion>1.6</javaversion>
					</info>
					<guiprefs height="600" resizable="yes" width="800">
						<laf name="metouia">
							<os family="unix"/>
						</laf>
					</guiprefs>
	
					<locale>
						<langpack iso3="eng"/>
					</locale>
					<resources>
						<res id="Installer.image" src="../src/icons/dqguru_huge.png"/>
						<res src="DQguruShortcut.xml" id="shortcutSpec.xml"/>
						<res id="LicencePanel.licence" src="../LICENSE" />
					</resources>
					<listeners>
						<listener installer="SummaryLoggerInstallerListener"/>
				       	<listener installer="RegistryInstallerListener"
								  uninstaller="RegistryUninstallerListener">
				          <os family="windows"/>
				       	</listener>
					</listeners>
					<panels>
						<panel classname="HelloPanel"/>
						<panel classname="LicencePanel"/>
						<panel classname="TargetPanel"/>
						<panel classname="InstallPanel"/>
						<panel classname="ShortcutPanel"/>
						<panel classname="SimpleFinishPanel"/>
					</panels>
					<packs>
						<pack name="Core" required="yes">
							<description>DQguru Core Files</description>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="dqguru.jar"/>
								<include name="dqguru.exe"/>
								<include name="dqguru-engine-runner.jar"/>
							</fileset>
							<fileset dir="../staging/lib" targetdir="$INSTALL_PATH/lib">
								<include name="*.jar"/>
							</fileset>
							<!-- the directory jdbc is referenced in the manifest as well as
								various targets. -->
							<fileset dir="../staging/jdbc" targetdir="$INSTALL_PATH/jdbc">
								<include name="*.jar"/>
								<include name="*.ini"/>
							</fileset>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="LICENSE"/>
							</fileset>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH">
								<include name="LEGAL"/>
							</fileset>
							<fileset dir="." targetdir="$INSTALL_PATH">
								<include name="*.reg"/>
							</fileset>
							<fileset dir="../src/icons" targetdir="$INSTALL_PATH">
								<include name="*.ico"/>
							</fileset>
							<fileset dir="." targetdir="$INSTALL_PATH">
								<include name="*.ico"/>
							</fileset>
							<fileset dir="../staging/" targetdir="$INSTALL_PATH/uninstaller">
								<include name="uninstaller.exe"/>
							</fileset>
						</pack>
					</packs>
					<native type="izpack" name="ShellLink.dll"/>
					<native type="izpack" name="ShellLink_x64.dll"/>
					<native type="3rdparty" name="COIOSHelper.dll" stage="both">
				        <os family="windows"/>
				    </native>
				</installation>
				]]>
			</config>
		</izpack>
	</target>
	
	<!-- This is needed to prevent a problem with DocBook help file generation 
		 in which the XSLT replaces the spaces in the path name with '%20', and
		 doesn't convert it back when saving the files. It looks like this is
		 related to the DocBook chunking functionality.
		 We don't know of any good way to fix this yet, so we have this
		 check for the time being.-->
	<target name="checkBuildPath" 
		description="Ensure the build path contains no spaces.">
		<echo message="Note: Your build path cannot contain any spaces at this point because of a problem with help file generation."/>
		<echo message="Checking build path..."/>
		<!-- Check if the build path is absolute. If so, set buildPath -->
		<condition property="buildPath" value="${build}">
			<or>
				<!-- Check for Windows style absolute pathnames-->
				<and>
					<or>
						<!-- pathname with backslash only -->
						<matches string="${build}" pattern="^\\{1}.*"/>
						<!-- pathname with drive letter -->
						<matches string="${build}" pattern="^[a-zA-Z]{1}:\\.*"/>
					</or>
					<os family="windows"/>
				</and>
				<!-- Check for Unix style absolute pathnames -->
				<and>
					<matches string="${build}" pattern="^//{1}.*"/>
					<not>
						<os family="windows"/>
					</not>
				</and>
			</or>
		</condition>
		<!-- Check if buildPath is set. If not, then it's a relative buildpath-->
		<condition property="buildPath" value="${basedir}\${build}">
			<and>
				<not>
					<isset property="buildPath"/>
				</not>
				<os family="windows"/>
			</and>
		</condition>
		<!-- Check if buildPath is set. If not, then it's not a windows buildpath (i.e. doesn't use '\')-->
		<condition property="buildPath" value="${basedir}/${build}">
			<not>
				<isset property="buildPath"/>
			</not>
		</condition>
		<echo message="Your build path is ${buildPath}"/>
		<!-- Now check the build path for spaces -->
	    <fail message="Your build path MUST NOT contain any spaces. See the file 'build.properties.example' to see how to set property 'build' to an absolute pathname that does not contain any spaces">
	    	<condition>
				<contains string="${buildPath}" substring=" "/>
	    	</condition>
		</fail>
	</target>
	
	<!-- 
		This build target checks for the sqlpower-library project, which is
		required by the MatchMaker to build. 
	-->
	<target name="check.sqlpower.library.dir">
		<echo message="Checking for sqlpower-library project..."/>
		<fail message="Can't find sqlpower-library project! Set the property 'sqlpower.library.home' to point to the sqlpower-library project directory">
			<condition>
				<not>
					<isset property="sqlpower.library.home"/>
				</not>
			</condition>
		</fail>
	</target>
	
	<target name="build.sqlpower.library" depends="check.sqlpower.library.dir" if="buildSQLPowerLibrary">
		<echo message="Attempting to build sqlpower-library project..."/>
		<ant dir="${sqlpower.library.home}" target="clean" inheritall="false" />
		<ant dir="${sqlpower.library.home}" target="jar" inheritall="false" />
	</target>
	
	<target name="copy.sqlpower.library" depends="check.sqlpower.library.dir">
		<copy file="${sqlpower.library.home}/dist/sqlpower_library.jar" todir="${lib}"/>
		<copy file="${sqlpower.library.home}/dist/sqlpower_library-tests.jar" todir="${buildlib}"/>
	</target>
	
	
	<target name="clean">
		<delete dir="${build}"/>
		<delete dir="${staging.dir}"/>
	</target>

	
	<target name="dist-clean" depends="clean">
		<delete dir="${dist.base}"/>
	</target>
	
	<target name="matchmaker.version.properties" depends="getAppVersion">
		<mkdir dir="${dist.base}"/>
		<propertyfile
		    file="${dist.base}/matchmaker.version.properties"
		    comment="DQguru Version">
		  <entry key="app.version" value="${app.version}"/>
		</propertyfile>
	</target>
</project>
